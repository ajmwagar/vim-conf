!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
regExForName	plugged/deoplete-ternjs/tests/test.js	/^  regExForName: "", \/\/ define regex for name validation$/;"	p	class:MYAPP.commonMethod
regExForPhone	plugged/deoplete-ternjs/tests/test.js	/^  regExForPhone: "", \/\/ define regex for phone no validation$/;"	p	class:MYAPP.commonMethod
validateName	plugged/deoplete-ternjs/tests/test.js	/^  validateName: function(name){$/;"	m	class:MYAPP.commonMethod
validatePhoneNo	plugged/deoplete-ternjs/tests/test.js	/^  validatePhoneNo: function(phoneNo){$/;"	m	class:MYAPP.commonMethod
addListener	plugged/deoplete-ternjs/tests/test.js	/^    addListener: function(el, type, fn) {$/;"	m	class:MYAPP.event
removeListener	plugged/deoplete-ternjs/tests/test.js	/^    removeListener: function(el, type, fn) {$/;"	m	class:MYAPP.event
getEvent	plugged/deoplete-ternjs/tests/test.js	/^    getEvent: function(e) {$/;"	m	class:MYAPP.event
g:deoplete#enable_at_startup	plugged/deoplete-ternjs/tests/ternjs-deoplete.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#auto_completion_start_length	plugged/deoplete-ternjs/tests/ternjs-deoplete.vim	/^let g:deoplete#auto_completion_start_length = 1$/;"	v
g:deoplete#enable_debug	plugged/deoplete-ternjs/tests/ternjs-deoplete.vim	/^let g:deoplete#enable_debug=1$/;"	v
g:deoplete#enable_at_startup	plugged/deoplete-ternjs/tests/ternjs-deoplete-conflict.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#auto_completion_start_length	plugged/deoplete-ternjs/tests/ternjs-deoplete-conflict.vim	/^let g:deoplete#auto_completion_start_length = 1$/;"	v
os	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import os$/;"	i
re	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import re$/;"	i
json	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import json$/;"	i
platform	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import platform$/;"	i
subprocess	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import subprocess$/;"	i
threading	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import threading$/;"	i
request	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^from urllib import request$/;"	i
HTTPError	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^from urllib.error import HTTPError$/;"	i
URLError	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^from urllib.error import URLError$/;"	i
Base	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^from deoplete.source.base import Base$/;"	i
is_window	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^is_window = platform.system() == "Windows"$/;"	v
import_pattern	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import_pattern = re.compile(import_re)$/;"	v
opener	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^opener = request.build_opener(request.ProxyHandler({}))$/;"	v
Source	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^class Source(Base):$/;"	c
__init__	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def __init__(self, vim):$/;"	m	class:Source
on_init	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def on_init(self, context):$/;"	m	class:Source
get_complete_position	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
gather_candidates	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
initialize	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def initialize(self):$/;"	m	class:Source
__del__	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def __del__(self):$/;"	m	class:Source	file:
start_server	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def start_server(self):$/;"	m	class:Source
stop_server	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def stop_server(self):$/;"	m	class:Source
_search_tern_project_dir	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def _search_tern_project_dir(self):$/;"	m	class:Source
make_request	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def make_request(self, doc, silent):$/;"	m	class:Source
run_command	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def run_command(self, query, pos, fragments=True, silent=False):$/;"	m	class:Source
full_buffer	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def full_buffer(self):$/;"	m	class:Source
buffer_slice	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def buffer_slice(self, buf, start, end):$/;"	m	class:Source
buffer_fragment	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def buffer_fragment(self):$/;"	m	class:Source
completation	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def completation(self, pos):$/;"	m	class:Source
type_doc	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def type_doc(self, rec):$/;"	m	class:Source
g:loaded_deoplete_ternjs	plugged/deoplete-ternjs/plugin/deoplete-ternjs.vim	/^let g:loaded_deoplete_ternjs = 1$/;"	v
g:deoplete#sources#ternjs#tern_bin	plugged/deoplete-ternjs/plugin/deoplete-ternjs.vim	/^let g:deoplete#sources#ternjs#tern_bin = get(g:, 'deoplete#sources#ternjs#tern_bin', 'tern') $/;"	v
g:tern#filetypes	plugged/deoplete-ternjs/plugin/deoplete-ternjs.vim	/^let g:tern#filetypes = [$/;"	v
g:loaded_nerdtree_ui_glue_autoload	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
nerdtree#ui_glue#createDefaultBindings	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
activateAll	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll()$/;"	f
activateDirNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode)$/;"	f
activateFileNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
activateBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
nerdtree#ui_glue#bookmarkNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
chCwd	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node)$/;"	f
chRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node)$/;"	f
nerdtree#ui_glue#chRootCwd	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
closeChildren	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
closeCurrentDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
closeTreeWindow	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
deleteBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark)$/;"	f
displayHelp	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp()$/;"	f
findAndRevealPath	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr)$/;"	f
handleLeftClick	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
handleMiddleMouse	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
jumpToChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(currentNode, direction)$/;"	f
nerdtree#ui_glue#invokeKeyMap	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
jumpToFirstChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
jumpToLastChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
jumpToParent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
jumpToRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
jumpToNextSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
jumpToPrevSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
jumpToSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(currentNode, forward)$/;"	f
nerdtree#ui_glue#openBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
openHSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
openVSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
openExplorer	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
openInNewTab	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
openInNewTabSilent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
openNodeRecursively	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
previewNodeCurrent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
previewNodeHSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
previewNodeVSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
nerdtree#ui_glue#revealBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
refreshRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot()$/;"	f
refreshCurrent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
nerdtree#ui_glue#setupCommands	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
SID	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function s:SID()$/;"	f
showMenu	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node)$/;"	f
toggleIgnoreFilter	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom()$/;"	f
nerdtree#ui_glue#upDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(keepState)$/;"	f
upDirCurrentRootOpen	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
upDirCurrentRootClosed	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
g:loaded_nerdtree_autoload	plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
nerdtree#version	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version()$/;"	f
nerdtree#checkForBrowse	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
reuseWin	plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
nerdtree#completeBookmarks	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#compareNodes	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#deprecated	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#exec	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd)$/;"	f
nerdtree#has_opt	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#runningWindows	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#runningCygwin	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin()$/;"	f
nerdtree#echo	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#renderView	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
g:loaded_nerdtree_fs_menu	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:NERDTreeAutoDeleteBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
promptToDelBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToRenameBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToRenameBuffer(bufnum, msg, newFileName)$/;"	f
NERDTreeAddNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeMoveNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeDeleteNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeListNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeCopyNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeQuickLook	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRevealInFinder	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeExecuteFile	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
g:loaded_nerdtree_exec_menuitem	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
NERDTreeExecFileActive	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecFile	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
loaded_nerd_tree	plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
s:old_cpo	plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
initVariable	plugged/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
g:NERDTreeIgnore	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeSortOrder	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
NERDTree	plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTreeHijackNetrw	plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeAddMenuItem	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddSubmenu	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeAddKeyMap	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeRender	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeFocus	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeCWD	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeAddPathFilter	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
s:tree_up_dir_line	plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:dirArrows	plugged/nerdtree/syntax/nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpandable, '~]\\-')$/;"	v
s:FlagSet	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
g:NERDTreeFlagSet	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
FlagSet.addFlag	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
FlagSet.clearFlags	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
FlagSet._flagsForScope	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
FlagSet.New	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
FlagSet.removeFlag	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
FlagSet.renderToString	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:UI	plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
g:NERDTreeUI	plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
UI.centerView	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
UI._dumpHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
UI.New	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
UI.getPath	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
UI.getLineNum	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(file_node)$/;"	f
UI.getRootLineNum	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
UI.getShowBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
UI.getShowFiles	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
UI.getShowHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
UI.getShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
UI._indentLevelFor	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
UI.IndentWid	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
UI.isIgnoreFilterEnabled	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
UI.isMinimal	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
UI.MarkupReg	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
UI._renderBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
UI.restoreScreenState	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
UI.saveScreenState	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
UI.setShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
UI._stripMarkup	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
UI.render	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
UI.renderViewSavingPosition	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
UI.toggleHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
UI.toggleIgnoreFilter	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
UI.toggleShowBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
UI.toggleShowFiles	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
UI.toggleShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
UI.toggleZoom	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
UI.UpDirLine	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:NERDTreeSortStarIndex	plugged/nerdtree/lib/nerdtree/path.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:Path	plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
g:NERDTreePath	plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
Path.AbsolutePathFor	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
Path.bookmarkNames	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
Path.changeToDir	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.Create	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.copy	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
Path.CopyingSupported	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.copyingWillOverwrite	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.createParentDirectories	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
Path.delete	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
Path.edit	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
Path.extractDriveLetter	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.exists	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
Path._escChars	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
Path.getDir	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
Path.getParent	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
Path.getLastPathComponent	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getSortOrderIndex	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path._splitChunks	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
Path.getSortKey	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
Path.isHiddenUnder	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
Path.isUnixHiddenFile	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
Path.isUnixHiddenPath	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
Path.ignore	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
Path._ignorePatternMatches	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path.isAncestor	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(path)$/;"	f
Path.isUnder	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.JoinPathStrings	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.equals	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
Path.New	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
Path.Slash	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Slash()$/;"	f
Path.Resolve	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
Path.readInfoFromDisk	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
Path.refreshFlags	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
Path.rename	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
Path._strForUI	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
Path._strForCd	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
Path._str	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
Path.strTrunk	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
Path.tabnr	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
Path.WinToUnixPath	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:TreeDirNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
g:NERDTreeDirNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
TreeDirNode.AbsoluteTreeRoot	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.activate	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode.addChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.displayString	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
TreeDirNode.findNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getCascade	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
TreeDirNode.getChildCount	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildIndex	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode._glob	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
TreeDirNode.GetSelected	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.getVisibleChildCount	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.isCascadable	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
TreeDirNode._initChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode.New	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
TreeDirNode.open	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode.openAlong	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
TreeDirNode.openExplorer	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode._openInNewTab	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode.openRecursively	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.refreshFlags	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
TreeDirNode.refreshDirFlags	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
TreeDirNode.reveal	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
TreeDirNode.removeChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.sortChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode.transplantChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:Creator	plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
g:NERDTreeCreator	plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
Creator._bindMappings	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator.BufNamePrefix	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.createTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.CreateWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.createWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator._createNERDTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator.CreateMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.createMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator._createTreeWin	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator.New	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator._nextBufferName	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
Creator._nextBufferNumber	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator.ToggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator.toggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
Creator._uniq	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:MenuController	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
g:NERDTreeMenuController	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
MenuController.New	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController.showMenu	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuController._echoPrompt	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._current	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
MenuController._handleKeypress	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._allIndexesFor	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._nextIndexFor	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._setCmdheight	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController._saveOptions	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._restoreOptions	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._cursorDown	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:Bookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
g:NERDTreeBookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
Bookmark.activate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.AddBookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.Bookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.BookmarkExistsFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.CacheBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.CompareBookmarksByName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.ClearAll	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.delete	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetNodeForName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.mustExist	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.New	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.open	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.SortBookmarksList	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.str	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.ToRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.validate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
Bookmark.Write	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Opener	plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
g:NERDTreeOpener	plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
Opener._bufInWindows	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
Opener._checkToCloseTree	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener._firstUsableWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
Opener._gotoTargetWin	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener._isWindowUsable	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
Opener.New	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener._newSplit	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
Opener._newVSplit	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener.open	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
Opener._openFile	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
Opener._openDirectory	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener._previousWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener._restoreCursorPos	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener._reuseWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener._saveCursorPos	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:MenuItem	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
g:NERDTreeMenuItem	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
MenuItem.All	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:NERDTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
g:NERDTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
NERDTree.AddPathFilter	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
NERDTree.changeRoot	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
NERDTree.Close	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
NERDTree.CloseIfQuitOnOpen	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
NERDTree.CursorToBookmarkTable	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
NERDTree.CursorToTreeWin	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
NERDTree.ExistsForBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
NERDTree.ExistsForTab	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
NERDTree.ForCurrentBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
NERDTree.ForCurrentTab	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
NERDTree.getRoot	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
NERDTree.GetWinNum	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
NERDTree.IsOpen	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
NERDTree.isTabTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
NERDTree.isWinTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
NERDTree.MustBeOpen	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
NERDTree.New	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
NERDTree.PathFilters	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
NERDTree.previousBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
NERDTree.setPreviousBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
NERDTree.render	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:Event	plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
g:NERDTreeEvent	plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
Event.New	plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:TreeFileNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
g:NERDTreeFileNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
TreeFileNode.activate	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode.bookmark	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBookmarks	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
TreeFileNode.copy	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getNerdtree	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
TreeFileNode.GetRootForTab	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetSelected	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.isVisible	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.isRoot	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.New	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
TreeFileNode.open	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode.openSplit	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.openInNewTab	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.putCursorHere	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.refreshFlags	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
TreeFileNode.rename	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode._renderToString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:KeyMap	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
g:NERDTreeKeyMap	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
KeyMap.All	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.FindFor	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap.BindAll	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.bind	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap.Remove	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap.invoke	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
KeyMap.Invoke	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap.Create	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.Add	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:Notifier	plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
Notifier.AddListener	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
Notifier.NotifyListeners	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
Notifier.GetListenersMap	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
Notifier.GetListenersForEvent	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
g:NERDTreePathNotifier	plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:gutentags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_scopefile	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_auto_add_cscope	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
gutentags#cscope#init	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#command_terminated	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#command_terminated(job_id, data, event) abort$/;"	f
gutentags#cscope#generate	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, write_mode) abort$/;"	f
g:gutentags_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_ctags_auto_set_tags	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_check_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_extra_args	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_post_process_cmd	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_exclude	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
_handleOldOptions	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:did_check_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
gutentags#ctags#init	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#generate	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, write_mode) abort$/;"	f
get_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
process_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
g:gutentags_gtags_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_dbpath	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_options_file	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_gtags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_auto_add_gtags_cscope	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^	let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
s:added_db_files	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:job_db_files	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:job_db_files = []$/;"	v
add_db	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
gutentags#gtags_cscope#init	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_out	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_out(job, data) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
get_unix_cmd	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:get_unix_cmd(for_job, proj_options, db_path) abort$/;"	f
get_win32_cmd	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:get_win32_cmd(for_job, proj_options, db_path) abort$/;"	f
gutentags#gtags_cscope#generate	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, db_file, write_mode) abort$/;"	f
gutentags#chdir	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#throw	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#throwerr	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throwerr(message)$/;"	f
gutentags#trace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#stripslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#normalizepath	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#shellslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#get_plat_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_res_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#is_path_rooted	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#is_path_rooted	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#is_path_rooted(path) abort$/;"	f
s:known_files	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
cache_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
gutentags#validate_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#get_project_file_list_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_project_info	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_cachefile	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#setup_gutentags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:maybe_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:maybe_in_progress = {}$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:maybe_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:maybe_in_progress[module] = {}$/;"	v
gutentags#add_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_progress(module, file) abort$/;"	f
gutentags#get_execute_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_execute_cmd() abort$/;"	f
gutentags#get_execute_cmd_suffix	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_execute_cmd_suffix() abort$/;"	f
manual_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
write_triggered_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
gutentags#rescan	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#delete_lock_files	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#delete_lock_files() abort$/;"	f
gutentags#toggletrace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#fake	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#inprogress	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#statusline	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
ParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
PROJ_ROOT	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -i %TAGS_FILE%.files$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -R$/;"	v
Usage	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
ParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
Unlock	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
ShowUsage	plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
g:gutentags_debug	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:loaded_gutentags	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:gutentags_trace	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_fake	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_background_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_pause_after_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_modules	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_init_user_func	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_add_default_project_roots	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root_finder	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_project_info	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_exclude_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'])$/;"	v
g:gutentags_resolve_symlinks	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_generate_on_new	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_missing	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_write	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_generate_on_empty_buffer	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_file_list_command	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_define_advanced_commands	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
gutentags_detect	plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
GutentagsUnlock	plugged/vim-gutentags/plugin/gutentags.vim	/^command! GutentagsUnlock :call gutentags#delete_lock_files()$/;"	c
GutentagsToggleEnabled	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleTrace	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsToggleFake	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
g:jsx_ext_required	plugged/vim-polyglot/config.vim	/^  let g:jsx_ext_required = 0$/;"	v
g:vim_json_syntax_conceal	plugged/vim-polyglot/config.vim	/^  let g:vim_json_syntax_conceal = 0$/;"	v
g:filetype_euphoria	plugged/vim-polyglot/config.vim	/^let g:filetype_euphoria = 'elixir'$/;"	v
filetypedetect	plugged/vim-polyglot/config.vim	/^augroup filetypedetect$/;"	a
g:python_highlight_all	plugged/vim-polyglot/config.vim	/^let g:python_highlight_all = 1$/;"	v
filetypedetect	plugged/vim-polyglot/config.vim	/^augroup filetypedetect$/;"	a
scss_indent#GetIndent	plugged/vim-polyglot/autoload/scss_indent.vim	/^fun! scss_indent#GetIndent(lnum)$/;"	f
s:errors	plugged/vim-polyglot/autoload/elm.vim	/^let s:errors = []$/;"	v
elmOracle	plugged/vim-polyglot/autoload/elm.vim	/^function! s:elmOracle(...) abort$/;"	f
elm#Format	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Format() abort$/;"	f
elm#ShowDocs	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#ShowDocs() abort$/;"	f
elm#BrowseDocs	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#BrowseDocs() abort$/;"	f
elm#Syntastic	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Syntastic(input) abort$/;"	f
elm#Build	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Build(input, output, show_warnings) abort$/;"	f
elm#Make	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Make(...) abort$/;"	f
elm#ErrorDetail	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#ErrorDetail() abort$/;"	f
elm#Repl	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Repl() abort$/;"	f
elm#Oracle	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Oracle(filepath, word) abort$/;"	f
s:fullComplete	plugged/vim-polyglot/autoload/elm.vim	/^let s:fullComplete = ''$/;"	v
elm#Complete	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Complete(findstart, base) abort$/;"	f
elm#Test	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#Test() abort$/;"	f
elm#FindRootDirectory	plugged/vim-polyglot/autoload/elm.vim	/^function! elm#FindRootDirectory() abort$/;"	f
ExecuteInRoot	plugged/vim-polyglot/autoload/elm.vim	/^function! s:ExecuteInRoot(cmd) abort$/;"	f
g:raco_command	plugged/vim-polyglot/autoload/racket.vim	/^  let g:raco_command = system("which raco")$/;"	v
elm#util#IsWin	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#IsWin() abort$/;"	f
elm#util#CheckBin	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#CheckBin(bin, url) abort$/;"	f
get_browser_command	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! s:get_browser_command() abort$/;"	f
elm#util#OpenBrowser	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#OpenBrowser(url) abort$/;"	f
elm#util#DecodeJSON	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#DecodeJSON(s) abort$/;"	f
strip_color	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! s:strip_color(msg) abort$/;"	f
elm#util#Echo	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#Echo(title, msg) abort$/;"	f
elm#util#EchoSuccess	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoSuccess(title, msg) abort$/;"	f
elm#util#EchoWarning	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoWarning(title, msg) abort$/;"	f
elm#util#EchoError	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoError(title, msg) abort$/;"	f
elm#util#EchoLater	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoLater(func_name, title, msg) abort$/;"	f
elm#util#EchoStored	plugged/vim-polyglot/autoload/elm/util.vim	/^fun! elm#util#EchoStored() abort$/;"	f
elm#util#GoToModule	plugged/vim-polyglot/autoload/elm/util.vim	/^function! elm#util#GoToModule(name)$/;"	f
findLocalModule	plugged/vim-polyglot/autoload/elm/util.vim	/^function! s:findLocalModule(rel_path, root)$/;"	f
findDependencyModule	plugged/vim-polyglot/autoload/elm/util.vim	/^function! s:findDependencyModule(rel_path, root)$/;"	f
error	plugged/vim-polyglot/autoload/elm/util.vim	/^function! s:error(msg)$/;"	f
g:aria_attributes_complete	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
htmlcomplete#DetectOmniFlavor	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#CompleteTags	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#LoadAria	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
htmlcomplete#CheckDoctype	plugged/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
fish#Indent	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Indent()$/;"	f
fish#Format	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Format()$/;"	f
fish#Fold	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Fold()$/;"	f
fish#Complete	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#Complete(findstart, base)$/;"	f
fish#errorformat	plugged/vim-polyglot/autoload/fish.vim	/^function! fish#errorformat()$/;"	f
s:save_cpo	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:save_cpo = &cpo$/;"	v
s:V	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:V = vital#crystal#new()$/;"	v
s:P	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:P = s:V.import('Process')$/;"	v
s:C	plugged/vim-polyglot/autoload/crystal_lang.vim	/^let s:C = s:V.import('ColorEcho')$/;"	v
decode_json	plugged/vim-polyglot/autoload/crystal_lang.vim	/^    function! s:decode_json(text) abort$/;"	f
s:J	plugged/vim-polyglot/autoload/crystal_lang.vim	/^    let s:J = s:V.import('Web.JSON')$/;"	v
decode_json	plugged/vim-polyglot/autoload/crystal_lang.vim	/^    function! s:decode_json(text) abort$/;"	f
echo_error	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:echo_error(msg, ...) abort$/;"	f
run_cmd	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_cmd(cmd) abort$/;"	f
find_root_by_spec	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_root_by_spec(d) abort$/;"	f
crystal_lang#entrypoint_for	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#entrypoint_for(file_path) abort$/;"	f
crystal_lang#tool	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#tool(name, file, pos, option_str) abort$/;"	f
crystal_lang#impl	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#impl(file, pos, option_str) abort$/;"	f
jump_to_impl	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:jump_to_impl(impl) abort$/;"	f
crystal_lang#jump_to_definition	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#jump_to_definition(file, pos) abort$/;"	f
crystal_lang#context	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#context(file, pos, option_str) abort$/;"	f
crystal_lang#type_hierarchy	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#type_hierarchy(file, option_str) abort$/;"	f
find_completion_start	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_completion_start() abort$/;"	f
crystal_lang#complete	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#complete(findstart, base) abort$/;"	f
crystal_lang#get_spec_switched_path	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#get_spec_switched_path(absolute_path) abort$/;"	f
crystal_lang#switch_spec_file	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#switch_spec_file(...) abort$/;"	f
run_spec	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_spec(root, path, ...) abort$/;"	f
crystal_lang#run_all_spec	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_all_spec(...) abort$/;"	f
crystal_lang#run_current_spec	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_current_spec(...) abort$/;"	f
crystal_lang#format_string	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format_string(code, ...) abort$/;"	f
crystal_lang#format	plugged/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format(option_str, ...) abort$/;"	f
cargo#cmd	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#cmd(args)$/;"	f
cargo#build	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#build(args)$/;"	f
cargo#clean	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#clean(args)$/;"	f
cargo#doc	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#doc(args)$/;"	f
cargo#new	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#new(args)$/;"	f
cargo#init	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#init(args)$/;"	f
cargo#run	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#run(args)$/;"	f
cargo#test	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#test(args)$/;"	f
cargo#bench	plugged/vim-polyglot/autoload/cargo.vim	/^function! cargo#bench(args)$/;"	f
coffee#CoffeeSetUpVariables	plugged/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpVariables()$/;"	f
coffee#CoffeeSetUpErrorFormat	plugged/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpErrorFormat()$/;"	f
g:rustfmt_autosave	plugged/vim-polyglot/autoload/rustfmt.vim	/^	let g:rustfmt_autosave = 0$/;"	v
g:rustfmt_command	plugged/vim-polyglot/autoload/rustfmt.vim	/^	let g:rustfmt_command = "rustfmt"$/;"	v
g:rustfmt_options	plugged/vim-polyglot/autoload/rustfmt.vim	/^	let g:rustfmt_options = ""$/;"	v
g:rustfmt_fail_silently	plugged/vim-polyglot/autoload/rustfmt.vim	/^	let g:rustfmt_fail_silently = 0$/;"	v
s:got_fmt_error	plugged/vim-polyglot/autoload/rustfmt.vim	/^let s:got_fmt_error = 0$/;"	v
RustfmtCommandRange	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommandRange(filename, line1, line2)$/;"	f
RustfmtCommand	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommand(filename)$/;"	f
RunRustfmt	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! s:RunRustfmt(command, curw, tmpname)$/;"	f
rustfmt#FormatRange	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#FormatRange(line1, line2)$/;"	f
rustfmt#Format	plugged/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Format()$/;"	f
julia_latex_symbols#get_dict	plugged/vim-polyglot/autoload/julia_latex_symbols.vim	/^function! julia_latex_symbols#get_dict()$/;"	f
rust#Jump	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
Jump_Back	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Back()$/;"	f
Jump_Forward	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Forward()$/;"	f
rust#Run	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Run(bang, args)$/;"	f
Run	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Run(dict, rustc_args, args)$/;"	f
rust#Expand	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Expand(bang, args)$/;"	f
Expand	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Expand(dict, pretty, args)$/;"	f
rust#CompleteExpand	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Emit(type, args)$/;"	f
Emit	plugged/vim-polyglot/autoload/rust.vim	/^function! s:Emit(dict, type, args)$/;"	f
WithPath	plugged/vim-polyglot/autoload/rust.vim	/^function! s:WithPath(func, ...)$/;"	f
rust#AppendCmdLine	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
ShellTokenize	plugged/vim-polyglot/autoload/rust.vim	/^function! s:ShellTokenize(text)$/;"	f
RmDir	plugged/vim-polyglot/autoload/rust.vim	/^function! s:RmDir(path)$/;"	f
system	plugged/vim-polyglot/autoload/rust.vim	/^function! s:system(pwd, cmd)$/;"	f
has_webapi	plugged/vim-polyglot/autoload/rust.vim	/^function! s:has_webapi()$/;"	f
rust#Play	plugged/vim-polyglot/autoload/rust.vim	/^function! rust#Play(count, line1, line2, ...) abort$/;"	f
python#utils#fix_qflist	plugged/vim-polyglot/autoload/python/utils.vim	/^function! python#utils#fix_qflist() " {{{$/;"	f
ErrMsg	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
g:rubycomplete_rails	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:rubycomplete_classes_in_global	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_buffer_loading	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_include_object	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	plugged/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
s:rubycomplete_debug	plugged/vim-polyglot/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
dprint	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
GetBufferRubyModule	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubyClass	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubySingletonMethods	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetBufferRubyEntity	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
IsInClassDef	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsPosInClassDef	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
GetRubyVarType	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
rubycomplete#Init	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
rubycomplete#Complete	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
DefRuby	plugged/vim-polyglot/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
s:rubycomplete_rails_loaded	plugged/vim-polyglot/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:default_mappings	plugged/vim-polyglot/autoload/julia_blocks.vim	/^let s:default_mappings = {$/;"	v
getmapchars	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:getmapchars(function)$/;"	f
map_move	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_move(function, toend, backwards)$/;"	f
julia_blocks#owrapper_move	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_move(oper, function, toend, backwards)$/;"	f
julia_blocks#vwrapper_move	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_move(function)$/;"	f
unmap	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:unmap(function)$/;"	f
escape	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:escape(chars)$/;"	f
map_select	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_select(function)$/;"	f
julia_blocks#owrapper_select	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_select(oper, function) ", toend, backwards)$/;"	f
julia_blocks#vwrapper_select	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_select(function)$/;"	f
map_aux	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_aux(function)$/;"	f
s:julia_blocks_functions	plugged/vim-polyglot/autoload/julia_blocks.vim	/^let s:julia_blocks_functions = {$/;"	v
julia_blocks#init_mappings	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#init_mappings()$/;"	f
julia_blocks#remove_mappings	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#remove_mappings()$/;"	f
restore_view	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:restore_view()$/;"	f
abort	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:abort()$/;"	f
set_mark_tick	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:set_mark_tick(...)$/;"	f
get_save_pos	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:get_save_pos(...)$/;"	f
on_end	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_end()$/;"	f
on_begin	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_begin()$/;"	f
matchit	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:matchit()$/;"	f
move_before_begin	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:move_before_begin()$/;"	f
cycle_until_end	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cycle_until_end()$/;"	f
moveto_block_delim	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_block_delim(toend, backwards, ...)$/;"	f
compare_pos	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:compare_pos(pos1, pos2)$/;"	f
julia_blocks#move_N	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_N()$/;"	f
julia_blocks#move_n	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_n()$/;"	f
julia_blocks#move_p	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_p()$/;"	f
julia_blocks#move_P	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_P()$/;"	f
moveto_currentblock_end	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_currentblock_end()$/;"	f
julia_blocks#moveblock_N	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_N()$/;"	f
julia_blocks#moveblock_n	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_n()$/;"	f
julia_blocks#moveblock_p	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_p()$/;"	f
julia_blocks#moveblock_P	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_P()$/;"	f
julia_blocks#whereami	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#whereami()$/;"	f
find_block	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:find_block(current_mode)$/;"	f
repeated_find	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:repeated_find(ai_mode)$/;"	f
julia_blocks#select_a	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_a(...)$/;"	f
julia_blocks#select_i	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_i()$/;"	f
julia_blocks#select_reset	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function julia_blocks#select_reset()$/;"	f
cursor_moved	plugged/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cursor_moved(...)$/;"	f
L2U_Setup	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_Setup()$/;"	f
L2U_SetupGlobal	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetupGlobal()$/;"	f
LaTeXtoUnicode#Refresh	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Refresh()$/;"	f
LaTeXtoUnicode#Enable	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Enable()$/;"	f
LaTeXtoUnicode#Disable	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Disable()$/;"	f
L2U_deprecated_options	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_deprecated_options()$/;"	f
L2U_file_type_regex	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_file_type_regex(ft)$/;"	f
L2U_ResetLastCompletionInfo	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ResetLastCompletionInfo()$/;"	f
L2U_ismatch	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ismatch()$/;"	f
L2U_partmatches_sort	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_partmatches_sort(p1, p2)$/;"	f
L2U_fix_compose_chars	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_fix_compose_chars(uni)$/;"	f
L2U_longest_common_prefix	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_longest_common_prefix(partmatches)$/;"	f
LaTeXtoUnicode#omnifunc	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#omnifunc(findstart, base)$/;"	f
LaTeXtoUnicode#PutLiteral	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#PutLiteral(k)$/;"	f
L2U_SetFallbackMapping	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetFallbackMapping(s, k)$/;"	f
LaTeXtoUnicode#Tab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Tab()$/;"	f
LaTeXtoUnicode#FallbackCallback	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#FallbackCallback()$/;"	f
LaTeXtoUnicode#CmdTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#CmdTab()$/;"	f
L2U_SetTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetTab(wait_insert_enter)$/;"	f
L2U_UnsetTab	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetTab()$/;"	f
LaTeXtoUnicode#AutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#AutoSub(...)$/;"	f
L2U_SetAutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetAutoSub(wait_insert_enter)$/;"	f
L2U_UnsetAutoSub	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetAutoSub()$/;"	f
LaTeXtoUnicode#Init	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Init(...)$/;"	f
LaTeXtoUnicode#Toggle	plugged/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Toggle()$/;"	f
julia#set_syntax_version	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#set_syntax_version(jvers)$/;"	f
julia#toggle_deprecated_syntax	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_deprecated_syntax()$/;"	f
julia#toggle_function_blockassign	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_function_blockassign()$/;"	f
julia#function_block2assign	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#function_block2assign()$/;"	f
julia#function_assign2block	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#function_assign2block()$/;"	f
s:nonid_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:nonidS_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:uniop_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜"$/;"	v
s:binop_chars	plugged/vim-polyglot/autoload/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←→∋∌⊕⊖⊞⊟∘∧⊗⊘↑↓∨⊠±"$/;"	v
s:binop_chars_extra	plugged/vim-polyglot/autoload/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U21A6\\\\U21AE\\\\U21CE\\\\U21CF\\\\U21D2\\\\U21D4\\\\U21F4-\\\\U21FF\\\\U2208-\\\\U220D\\\\U2213\\\\U2214\\\\U2217-\\\\U2219\\\\U221D\\\\U2224-\\\\U222A\\\\U2237\\\\U2238\\\\U223A\\\\U223B\\\\U223D\\\\U223E\\\\U2240-\\\\U228B\\\\U228D-\\\\U229C\\\\U229E-\\\\U22A3\\\\U22A9\\\\U22AC\\\\U22AE\\\\U22B0-\\\\U22B7\\\\U22BB-\\\\U22BD\\\\U22C4-\\\\U22C7\\\\U22C9-\\\\U22D3\\\\U22D5-\\\\U22ED\\\\U22F2-\\\\U22FF\\\\U25B7\\\\U27C8\\\\U27C9\\\\U27D1\\\\U27D2\\\\U27D5-\\\\U27D7\\\\U27F0\\\\U27F1\\\\U27F5-\\\\U27F7\\\\U27F7\\\\U27F9-\\\\U27FF\\\\U2900-\\\\U2918\\\\U291D-\\\\U2920\\\\U2944-\\\\U2970\\\\U29B7\\\\U29B8\\\\U29BC\\\\U29BE-\\\\U29C1\\\\U29E1\\\\U29E3-\\\\U29E5\\\\U29F4\\\\U29F6\\\\U29F7\\\\U29FA\\\\U29FB\\\\U2A07\\\\U2A08\\\\U2A1D\\\\U2A22-\\\\U2A2E\\\\U2A30-\\\\U2A3D\\\\U2A40-\\\\U2A45\\\\U2A4A-\\\\U2A58\\\\U2A5A-\\\\U2A63\\\\U2A66\\\\U2A67\\\\U2A6A-\\\\U2AD9\\\\U2ADB\\\\U2AF7-\\\\U2AFA\\\\U2B30-\\\\U2B44\\\\U2B47-\\\\U2B4C\\\\UFFE9-\\\\UFFEC"$/;"	v
s:idregex	plugged/vim-polyglot/autoload/julia.vim	/^let s:idregex = '[^' . s:nonidS_chars . '0-9!' . s:uniop_chars . s:binop_chars . '][^' . s:nonidS_chars . s:uniop_chars . s:binop_chars . s:binop_chars_extra . ']*'$/;"	v
s:operators	plugged/vim-polyglot/autoload/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
julia#idundercursor	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#idundercursor()$/;"	f
julia#gotodefinition	plugged/vim-polyglot/autoload/julia.vim	/^function! julia#gotodefinition()$/;"	f
lang_tag	plugged/vim-polyglot/autoload/xml/html5.vim	/^let lang_tag = [$/;"	v
charset	plugged/vim-polyglot/autoload/xml/html5.vim	/^let charset = [$/;"	v
autofill_tokens	plugged/vim-polyglot/autoload/xml/html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name', 'family-name', 'honorific-suffix', 'nickname', 'organization-title', 'username', 'new-password', 'current-password', 'organization', 'street-address', 'address-line1', 'address-line2', 'address-line3', 'address-level4', 'address-level3', 'address-level2', 'address-level1', 'country', 'country-name', 'postal-code', 'cc-name', 'cc-given-name', 'cc-additional-name', 'cc-family-name', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc', 'cc-type', 'transaction-currency', 'transaction-amount', 'language', 'bday', 'bday-day', 'bday-month', 'bday-year', 'sex', 'url', 'photo', 'tel', 'tel-country-code', 'tel-national', 'tel-area-code', 'tel-local', 'tel-local-prefix', 'tel-local-suffix', 'tel-extension', 'email', 'impp']$/;"	v
core_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], 'contextmenu': [], 'dir': ['ltr', 'rtl'], 'draggable': ['true', 'false'], 'hidden': ['hidden', ''], 'id': [], 'is': [], 'lang': lang_tag, 'spellcheck': ['true', 'false', ''], 'style': [], 'tabindex': [], 'title': []}$/;"	v
xml_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': ['http:\/\/www.w3.org\/1999\/xhtml', 'http:\/\/www.w3.org\/1998\/Math\/MathML', 'http:\/\/www.w3.org\/2000\/svg', 'http:\/\/www.w3.org\/1999\/xlink']}$/;"	v
body_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let body_attributes = {}$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
g:html5_event_handler_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^let attributes_value = {$/;"	v
event_handler_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythrough': [], 'onchange': [], 'onclick': [], 'oncontextmenu': [], 'ondblclick': [], 'ondrag': [], 'ondragend': [], 'ondragenter': [], 'ondragleave': [], 'ondragover': [], 'ondragstart': [], 'ondrop': [], 'ondurationchange': [], 'onemptied': [], 'onended': [], 'onerror': [], 'onfocus': [], 'onformchange': [], 'onforminput': [], 'oninput': [], 'oninvalid': [], 'onkeydown': [], 'onkeypress': [], 'onkeyup': [], 'onload': [], 'onloadeddata': [], 'onloadedmetadata': [], 'onloadstart': [], 'onmousedown': [], 'onmousemove': [], 'onmouseout': [], 'onmouseover': [], 'onmouseup': [], 'onmousewheel': [], 'onpause': [], 'onplay': [], 'onplaying': [], 'onprogress': [], 'onratechange': [], 'onreadystatechange': [], 'onscroll': [], 'onseeked': [], 'onseeking': [], 'onselect': [], 'onshow': [], 'onstalled': [], 'onsubmit': [], 'onsuspend': [], 'ontimeupdate': [], 'onvolumechange': [], 'onwaiting': []}$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
body_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblur': [], 'onerror': [], 'onfocus': [], 'onhashchange': [], 'onload': [], 'onmessage': [], 'onoffline': [], 'ononline': [], 'onpopstate': [], 'onredo': [], 'onresize': [], 'onstorage': [], 'onundo': [], 'onunload': []}$/;"	v
event_attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let event_attributes_value = {$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
g:html5_rdfa_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
relrev	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'index', 'last', 'license', 'meta', 'next', 'p3pv1', 'prev', 'role', 'section', 'stylesheet', 'subsection', 'start', 'top', 'up']$/;"	v
rdfa_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': [], 'property': [], 'resource': [], 'rel': relrev, 'rev': relrev, 'typeof': [], 'vocab': []}$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
rdfa_attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes_value = {$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
g:html5_microdata_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
microdata_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'itemprop': [], 'itemref': []}$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
microdata_attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes_value = {$/;"	v
attributes_value	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
g:html5_aria_attributes_complete	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
widget_role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'treeitem', 'combobox', 'grid', 'listbox', 'menu', 'menubar', 'radiogroup', 'tablist', 'tree', 'treegrid']$/;"	v
document_structure	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'document', 'feed', 'figure', 'group', 'heading', 'img', 'list', 'listitem', 'math', 'none', 'note', 'presentation', 'region', 'row', 'rowheader', 'separator', 'table', 'term']$/;"	v
landmark_role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main', 'navigation', 'search']$/;"	v
dpub_role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dpub-bibliography', 'dpub-biblioref', 'dpub-chapter', 'dpub-cover', 'dpub-epilogue', 'dpub-footnote', 'dpub-footnotes', 'dpub-foreword', 'dpub-glossary', 'dpub-glossdef', 'dpub-glossref', 'dpub-glossterm', 'dpub-index', 'dpub-locator', 'dpub-noteref', 'dpub-notice', 'dpub-pagebreak', 'dpub-pagelist', 'dpub-part', 'dpub-preface', 'dpub-prologue', 'dpub-pullquote', 'dpub-qna', 'dpub-subtitle', 'dpub-tip', 'dpub-title', 'dpub-toc']$/;"	v
role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
global_attributes	plugged/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
phrasing_elements	plugged/vim-polyglot/autoload/xml/html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'code', 'var', 'samp', 'kbd', 'sup', 'sub', 'q', 'cite', 'span', 'bdo', 'bdi', 'br', 'wbr', 'ins', 'del', 'img', 'picture', 'embed', 'object', 'iframe', 'map', 'area', 'script', 'noscript', 'ruby', 'video', 'audio', 'input', 'textarea', 'select', 'button', 'label', 'output', 'datalist', 'keygen', 'progress', 'command', 'canvas', 'time', 'meter', 'data', 'content', 'shadow']$/;"	v
metadata_elements	plugged/vim-polyglot/autoload/xml/html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
flow_elements	plugged/vim-polyglot/autoload/xml/html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'address', 'blockquote', 'ins', 'del', 'element', 'object', 'main', 'map', 'noscript', 'section', 'nav', 'article', 'aside', 'header', 'footer', 'video', 'audio', 'figure', 'table', 'template', 'form', 'fieldset', 'menu', 'canvas', 'details']$/;"	v
linktypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', 'license', 'next', 'nofollow', 'noreferrer', 'noopener', 'pingback', 'preconnect', 'prefetch', 'preload', 'prerender', 'prev', 'search', 'stylesheet', 'tag']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linktypes$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-touch-startup-image']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	plugged/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
abutton_dec	plugged/vim-polyglot/autoload/xml/html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|textarea'$/;"	v
crossorigin	plugged/vim-polyglot/autoload/xml/html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
g:xmldata_html5	plugged/vim-polyglot/autoload/xml/html5.vim	/^let g:xmldata_html5 = {$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role = {}$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes = {}$/;"	v
default_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {}$/;"	v
widget_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let widget_role = [$/;"	v
document_structure	plugged/vim-polyglot/autoload/xml/aria.vim	/^let document_structure = [$/;"	v
landmark_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let landmark_role = [$/;"	v
dpub_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let dpub_role = [$/;"	v
role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, dpub_role)$/;"	v
global_states_and_properties	plugged/vim-polyglot/autoload/xml/aria.vim	/^let global_states_and_properties = {$/;"	v
widget_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let widget_attributes = {$/;"	v
live_region_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let live_region_attributes = {$/;"	v
drag_and_drop_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let drag_and_drop_attributes = {$/;"	v
relationship_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let relationship_attributes = {$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_role['input']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
abstract_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbox']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria-selected', 'aria-setsize']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['radio']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria-required'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-selected']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-level', 'aria-multiselectable', 'aria-readonly']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead'] + ['aria-sort']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	plugged/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
aria_attributes_value	plugged/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes_value = {$/;"	v
default_role	plugged/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {$/;"	v
g:xmldata_aria	plugged/vim-polyglot/autoload/xml/aria.vim	/^let g:xmldata_aria = {$/;"	v
s:_plugin_name	plugged/vim-polyglot/autoload/vital/_crystal.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
vital#	plugged/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	plugged/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#function(funcname) abort$/;"	f
s:plugin_name	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:vital_base_dir	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:project_root	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:is_vital_vim	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:loaded	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:loaded = {}$/;"	v
s:cache_sid	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:cache_sid = {}$/;"	v
_function	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_function(fstr) abort$/;"	f
_SID	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_SID() abort$/;"	f
s:_s	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
_function	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_function(fstr) abort$/;"	f
vital#	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital = {}$/;"	v
new	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:new(plugin_name) abort$/;"	f
vital_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:vital_files() abort$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
import	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
load	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:load(...) abort dict$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
unload	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:unload() abort dict$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
exists	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:exists(name) abort dict$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
search	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:search(pattern) abort dict$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
plugin_name	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:plugin_name() abort dict$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
_self_vital_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_self_vital_files() abort$/;"	f
_global_vital_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_global_vital_files() abort$/;"	f
_extract_files	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
_file2module	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_file2module(file) abort$/;"	f
_import	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import(name) abort dict$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
_get_module	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_module(name) abort dict$/;"	f
_get_builtin_module	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
_import_func_name	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
_module_sid	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid(name) abort$/;"	f
_module_path	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_path(name) abort$/;"	f
_module_sid_base_dir	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
_dot_to_sharp	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
_source	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_source(path) abort$/;"	f
_sid	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
_execute	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_execute(cmd) abort$/;"	f
s:_unify_path_cache	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_unify_path_cache = {}$/;"	v
_unify_path	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_unify_path(path) abort$/;"	f
_unify_path	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:SNR	plugged/vim-polyglot/autoload/vital/crystal.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val])) . "]"'), '')$/;"	v
sid2sfuncs	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
_sfuncname	plugged/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
_uniq	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_uniq(list) abort$/;"	f
_uniq	plugged/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_uniq(list) abort$/;"	f
_SID	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:save_cpo = &cpo$/;"	v
_is_available	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_is_available() abort$/;"	f
is_available	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:is_available() abort$/;"	f
_define_ansi_highlights	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_define_ansi_highlights() abort$/;"	f
s:echorizer	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:echorizer = {$/;"	v
echorizer.eat	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.eat() abort$/;"	f
s:COLORS	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:COLORS = {$/;"	v
echorizer.echo_ansi	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo_ansi(code) abort$/;"	f
echorizer.echo	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo() abort$/;"	f
get_echorizer	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:get_echorizer(str) abort$/;"	f
echo	plugged/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:echo(str) abort$/;"	f
_SID	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:is_windows	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_unix	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:need_trans	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:TYPE_DICT	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
spawn	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
iconv	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
has_vimproc	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:has_vimproc() abort$/;"	f
system	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:system(str, ...) abort$/;"	f
get_last_status	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:get_last_status() abort$/;"	f
shellescape	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
shellescape	plugged/vim-polyglot/autoload/vital/_crystal/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
_SID	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^let s:save_cpo = &cpo$/;"	v
_true	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_true() abort$/;"	f
_false	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_false() abort$/;"	f
_null	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_null() abort$/;"	f
_resolve	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_resolve(val, prefix) abort$/;"	f
_vital_created	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_created(module) abort$/;"	f
_vital_loaded	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_depends	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_depends() abort$/;"	f
decode	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:decode(json, ...) abort$/;"	f
encode	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:encode(val, ...) abort$/;"	f
_encode_list	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_list(val, settings) abort$/;"	f
_encode_dict	plugged/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_dict(val, settings) abort$/;"	f
_SID	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
pop	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:pop(list) abort$/;"	f
push	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
shift	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:shift(list) abort$/;"	f
unshift	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
cons	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
conj	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
uniq	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
uniq_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
clear	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:clear(list) abort$/;"	f
concat	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:concat(list) abort$/;"	f
flatten	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
sort	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
_compare	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
sort_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
max_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
min_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
char_range	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
has	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
has_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
span	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
break	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
take_while	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
drop_while	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:drop_while(f, xs) abort$/;"	f
partition	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
all	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
any	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
and	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:and(xs) abort$/;"	f
or	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:or(xs) abort$/;"	f
map_accum	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
foldl	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
foldl1	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
foldr	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
foldr1	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
zip	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip(...) abort$/;"	f
zip_fill	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
with_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
find	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
_call_string_expr	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_call_string_expr(expr, args) abort$/;"	f
find_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
find_last_index	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
find_indices	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
has_common_items	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
intersect	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
group_by	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
_default_compare	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
binary_search	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
product	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:product(lists) abort$/;"	f
permutations	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
combinations	plugged/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
_SID	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_SID() abort$/;"	f
s:save_cpo	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
_vital_loaded	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_depends	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_created	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
replace	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
replace_first	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
_replace	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
scan	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
reverse	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
starts_with	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
ends_with	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
common_head	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
split_leftright	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
split3	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
nsplit	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:strchars	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
strchars	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
contains_multibyte	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
chop	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
chomp	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
_split_by_wcswidth_once	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
_split_by_wcswidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
trim	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim(str) abort$/;"	f
trim_start	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
trim_end	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
wrap	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
nr2byte	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
nr2enc_char	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
nr2hex	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
diffidx	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
substitute_last	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
dstring	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
lines	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:lines(str) abort$/;"	f
_pad_with_char	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
pad_left	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
pad_right	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
pad_both_sides	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
pad_between_letters	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
justify_equal_spacing	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
levenshtein_distance	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
padding_by_displaywidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
split_by_displaywidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
hash	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:hash(str) abort$/;"	f
truncate	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate_skipping	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
strwidthpart	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart_reverse	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:wcswidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
wcswidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
_wcwidth	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
remove_ansi_sequences	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
escape_pattern	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
unescape_pattern	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
unescape	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
iconv	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
repair_posix_text	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
join_posix_lines	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
split_posix_text	plugged/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
error	plugged/vim-polyglot/autoload/dart.vim	/^function! s:error(text) abort$/;"	f
cexpr	plugged/vim-polyglot/autoload/dart.vim	/^function! s:cexpr(errorformat, joined_lines) abort$/;"	f
dart#fmt	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#fmt(q_args) abort$/;"	f
dart#analyzer	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#analyzer(q_args) abort$/;"	f
dart#tojs	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#tojs(q_args) abort$/;"	f
dart#resolveUri	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#resolveUri(uri) abort$/;"	f
PackageMap	plugged/vim-polyglot/autoload/dart.vim	/^function! s:PackageMap() abort$/;"	f
DotPackagesFile	plugged/vim-polyglot/autoload/dart.vim	/^function! s:DotPackagesFile() abort$/;"	f
dart#setModifiable	plugged/vim-polyglot/autoload/dart.vim	/^function! dart#setModifiable() abort$/;"	f
s:words	plugged/vim-polyglot/autoload/clojurecomplete.vim	/^let s:words = ["*","*'","*1","*2","*3","*agent*","*allow-unresolved-vars*","*assert*","*clojure-version*","*command-line-args*","*compile-files*","*compile-path*","*compiler-options*","*data-readers*","*default-data-reader-fn*","*e","*err*","*file*","*flush-on-newline*","*fn-loader*","*in*","*math-context*","*ns*","*out*","*print-dup*","*print-length*","*print-level*","*print-meta*","*print-readably*","*read-eval*","*source-path*","*suppress-read*","*unchecked-math*","*use-context-classloader*","*verbose-defrecords*","*warn-on-reflection*","+","+'","-","-'","->","->>","->ArrayChunk","->Eduction","->Vec","->VecNode","->VecSeq","-cache-protocol-fn","-reset-methods",".","..","\/","<","<=","=","==",">",">=","EMPTY-NODE","Throwable->map","accessor","aclone","add-classpath","add-watch","agent","agent-error","agent-errors","aget","alength","alias","all-ns","alter","alter-meta!","alter-var-root","amap","ancestors","and","apply","areduce","array-map","as->","aset","aset-boolean","aset-byte","aset-char","aset-double","aset-float","aset-int","aset-long","aset-short","assert","assoc!","assoc","assoc-in","associative?","atom","await","await-for","await1","bases","bean","bigdec","bigint","biginteger","binding","bit-and","bit-and-not","bit-clear","bit-flip","bit-not","bit-or","bit-set","bit-shift-left","bit-shift-right","bit-test","bit-xor","boolean","boolean-array","booleans","bound-fn","bound-fn*","bound?","butlast","byte","byte-array","bytes","case","cast","cat","catch","char","char-array","char-escape-string","char-name-string","char?","chars","chunk","chunk-append","chunk-buffer","chunk-cons","chunk-first","chunk-next","chunk-rest","chunked-seq?","class","class?","clear-agent-errors","clojure-version","coll?","comment","commute","comp","comparator","compare","compare-and-set!","compile","complement","completing","concat","cond","cond->","cond->>","condp","conj!","conj","cons","constantly","construct-proxy","contains?","count","counted?","create-ns","create-struct","cycle","dec","dec'","decimal?","declare","dedupe","def","default-data-readers","definline","definterface","defmacro","defmethod","defmulti","defn","defn-","defonce","defprotocol","defrecord","defstruct","deftype","delay","delay?","deliver","denominator","deref","derive","descendants","destructure","disj!","disj","dissoc!","dissoc","distinct","distinct?","do","doall","dorun","doseq","dosync","dotimes","doto","double","double-array","doubles","drop","drop-last","drop-while","eduction","empty","empty?","ensure","ensure-reduced","enumeration-seq","error-handler","error-mode","eval","even?","every-pred","every?","ex-data","ex-info","extend","extend-protocol","extend-type","extenders","extends?","false?","ffirst","file-seq","filter","filterv","finally","find","find-keyword","find-ns","find-protocol-impl","find-protocol-method","find-var","first","flatten","float","float-array","float?","floats","flush","fn","fn","fn?","fnext","fnil","for","force","format","frequencies","future","future-call","future-cancel","future-cancelled?","future-done?","future?","gen-class","gen-interface","gensym","get","get-in","get-method","get-proxy-class","get-thread-bindings","get-validator","group-by","hash","hash-combine","hash-map","hash-ordered-coll","hash-set","hash-unordered-coll","identical?","identity","if","if-let","if-not","if-some","ifn?","import","in-ns","inc","inc'","init-proxy","instance?","int","int-array","integer?","interleave","intern","interpose","into","into-array","ints","io!","isa?","iterate","iterator-seq","juxt","keep","keep-indexed","key","keys","keyword","keyword?","last","lazy-cat","lazy-seq","let","let","letfn","line-seq","list","list*","list?","load","load-file","load-reader","load-string","loaded-libs","locking","long","long-array","longs","loop","loop","macroexpand","macroexpand-1","make-array","make-hierarchy","map","map-entry?","map-indexed","map?","mapcat","mapv","max","max-key","memfn","memoize","merge","merge-with","meta","method-sig","methods","min","min-key","mix-collection-hash","mod","monitor-enter","monitor-exit","munge","name","namespace","namespace-munge","neg?","new","newline","next","nfirst","nil?","nnext","not","not-any?","not-empty","not-every?","not=","ns","ns-aliases","ns-imports","ns-interns","ns-map","ns-name","ns-publics","ns-refers","ns-resolve","ns-unalias","ns-unmap","nth","nthnext","nthrest","num","number?","numerator","object-array","odd?","or","parents","partial","partition","partition-all","partition-by","pcalls","peek","persistent!","pmap","pop!","pop","pop-thread-bindings","pos?","pr","pr-str","prefer-method","prefers","primitives-classnames","print","print-ctor","print-dup","print-method","print-simple","print-str","printf","println","println-str","prn","prn-str","promise","proxy","proxy-call-with-super","proxy-mappings","proxy-name","proxy-super","push-thread-bindings","pvalues","quot","quote","rand","rand-int","rand-nth","random-sample","range","ratio?","rational?","rationalize","re-find","re-groups","re-matcher","re-matches","re-pattern","re-seq","read","read-line","read-string","reader-conditional","reader-conditional?","realized?","record?","recur","reduce","reduce-kv","reduced","reduced?","reductions","ref","ref-history-count","ref-max-history","ref-min-history","ref-set","refer","refer-clojure","reify","release-pending-sends","rem","remove","remove-all-methods","remove-method","remove-ns","remove-watch","repeat","repeatedly","replace","replicate","require","reset!","reset-meta!","resolve","rest","restart-agent","resultset-seq","reverse","reversible?","rseq","rsubseq","run!","satisfies?","second","select-keys","send","send-off","send-via","seq","seq?","seque","sequence","sequential?","set!","set","set-agent-send-executor!","set-agent-send-off-executor!","set-error-handler!","set-error-mode!","set-validator!","set?","short","short-array","shorts","shuffle","shutdown-agents","slurp","some","some->","some->>","some-fn","some?","sort","sort-by","sorted-map","sorted-map-by","sorted-set","sorted-set-by","sorted?","special-symbol?","spit","split-at","split-with","str","string?","struct","struct-map","subs","subseq","subvec","supers","swap!","symbol","symbol?","sync","tagged-literal","tagged-literal?","take","take-last","take-nth","take-while","test","the-ns","thread-bound?","throw","time","to-array","to-array-2d","trampoline","transduce","transient","tree-seq","true?","try","type","unchecked-add","unchecked-add-int","unchecked-byte","unchecked-char","unchecked-dec","unchecked-dec-int","unchecked-divide-int","unchecked-double","unchecked-float","unchecked-inc","unchecked-inc-int","unchecked-int","unchecked-long","unchecked-multiply","unchecked-multiply-int","unchecked-negate","unchecked-negate-int","unchecked-remainder-int","unchecked-short","unchecked-subtract","unchecked-subtract-int","underive","unquote","unquote-splicing","unreduced","unsigned-bit-shift-right","update","update-in","update-proxy","use","val","vals","var","var-get","var-set","var?","vary-meta","vec","vector","vector-of","vector?","volatile!","volatile?","vreset!","vswap!","when","when-first","when-let","when-not","when-some","while","with-bindings","with-bindings*","with-in-str","with-loading-context","with-local-vars","with-meta","with-open","with-out-str","with-precision","with-redefs","with-redefs-fn","xml-seq","zero?","zipmap"]$/;"	v
clojurecomplete#Complete	plugged/vim-polyglot/autoload/clojurecomplete.vim	/^function! clojurecomplete#Complete(findstart, base)$/;"	f
g:elixir_indent_max_lookbehind	plugged/vim-polyglot/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
sw	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
elixir#indent#indent	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
debug	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
starts_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:starts_with(text, expr, lnum)$/;"	f
ends_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:ends_with(text, expr, lnum)$/;"	f
is_string_or_comment	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
elixir#indent#searchpair_back_skip	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
keyword	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
find_last_pos	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
elixir#indent#handle_top_of_file	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(_lnum, _text, prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_follow_prev_nb	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(_lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
get_base_indent	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
elixir#indent#handle_following_trailing_do	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_do(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_trailing_rocket	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_rocket(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_following_prev_end	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_prev_end(_lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_pipe	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_comment	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_comment(_lnum, text, prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_end	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_mid_or_end_block_keyword	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_mid_or_end_block_keyword(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_close_bracket	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_close_bracket(lnum, text, _prev_nb_lnum, _prev_nb_text)$/;"	f
elixir#indent#handle_starts_with_binary_operator	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_inside_nested_construct	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_nested_construct(lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_with	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_with(pair_lnum, pair_col, lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_keyword_block	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_keyword_block(pair_lnum, _pair_col, _lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_pattern_match_block	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_pattern_match_block(block_start_lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_fn	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_fn(pair_lnum, _pair_col, lnum, text, prev_nb_lnum, prev_nb_text)$/;"	f
do_handle_inside_square_brace	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_square_brace(pair_lnum, pair_col, _lnum, _text, _prev_nb_lnum, _prev_nb_text)$/;"	f
do_handle_inside_curly_brace	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_curly_brace(pair_lnum, _pair_col, _lnum, _text, _prev_nb_lnum, _prev_nb_text)$/;"	f
do_handle_inside_parens	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_inside_parens(pair_lnum, pair_col, _lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#indent#handle_inside_generic_block	plugged/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(lnum, _text, prev_nb_lnum, prev_nb_text)$/;"	f
elixir#util#get_filename	plugged/vim-polyglot/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
vifm#edit#Init	plugged/vim-polyglot/autoload/vifm/edit.vim	/^function! vifm#edit#Init()$/;"	f
vifm#globals#Init	plugged/vim-polyglot/autoload/vifm/globals.vim	/^function! vifm#globals#Init()$/;"	f
g:jsx_ext_required	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:jsx_ext_required = 0$/;"	v
g:vim_json_syntax_conceal	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:vim_json_syntax_conceal = 0$/;"	v
g:filetype_euphoria	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let g:filetype_euphoria = 'elixir'$/;"	v
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
g:python_highlight_all	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let g:python_highlight_all = 1$/;"	v
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
isAnsible	plugged/vim-polyglot/ftdetect/polyglot.vim	/^function! s:isAnsible()$/;"	f
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
CJSX	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup CJSX$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
g:vim_ember_script	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:vim_ember_script = 1$/;"	v
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
g:vim_emblem	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:vim_emblem = 1$/;"	v
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
s:current_fileformats	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let s:current_fileformats = ''$/;"	v
s:current_fileencodings	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let s:current_fileencodings = ''$/;"	v
gofiletype_pre	plugged/vim-polyglot/ftdetect/polyglot.vim	/^function! s:gofiletype_pre(type)$/;"	f
gofiletype_post	plugged/vim-polyglot/ftdetect/polyglot.vim	/^function! s:gofiletype_post()$/;"	f
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
i3_ftdetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup i3_ftdetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
SourceFlowSyntax	plugged/vim-polyglot/ftdetect/polyglot.vim	/^fun! s:SourceFlowSyntax()$/;"	f
SelectJavascript	plugged/vim-polyglot/ftdetect/polyglot.vim	/^fun! s:SelectJavascript()$/;"	f
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
g:jsx_ext_required	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:jsx_ext_required = 1$/;"	v
g:jsx_pragma_required	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:jsx_pragma_required = 0$/;"	v
s:jsx_pragma_pattern	plugged/vim-polyglot/ftdetect/polyglot.vim	/^let s:jsx_pragma_pattern = '\\%^\\_s*\\\/\\*\\*\\%(\\_.\\%(\\*\\\/\\)\\@!\\)*@jsx\\_.\\{-}\\*\\\/'$/;"	v
EnableJSX	plugged/vim-polyglot/ftdetect/polyglot.vim	/^fu! <SID>EnableJSX()$/;"	f
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
g:mako_detect_lang_from_ext	plugged/vim-polyglot/ftdetect/polyglot.vim	/^  let g:mako_detect_lang_from_ext = 1$/;"	v
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
DetectPerl6	plugged/vim-polyglot/ftdetect/polyglot.vim	/^function! s:DetectPerl6()$/;"	f
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
setf	plugged/vim-polyglot/ftdetect/polyglot.vim	/^function! s:setf(filetype) abort$/;"	f
StarSetf	plugged/vim-polyglot/ftdetect/polyglot.vim	/^func! s:StarSetf(ft)$/;"	f
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
setf	plugged/vim-polyglot/ftdetect/polyglot.vim	/^function! s:setf(filetype) abort$/;"	f
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
output	plugged/vim-polyglot/build	/^output() {$/;"	f
download	plugged/vim-polyglot/build	/^download() {$/;"	f
extract	plugged/vim-polyglot/build	/^extract() {$/;"	f
copy_dir	plugged/vim-polyglot/build	/^copy_dir() {$/;"	f
update_readme	plugged/vim-polyglot/build	/^update_readme() {$/;"	f
b:did_indent	plugged/vim-polyglot/indent/typescript.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/typescript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
sw	plugged/vim-polyglot/indent/typescript.vim	/^  function s:sw()$/;"	f
sw	plugged/vim-polyglot/indent/typescript.vim	/^  function s:sw()$/;"	f
GetPair	plugged/vim-polyglot/indent/typescript.vim	/^  function s:GetPair(start,end,flags,skip,time,...)$/;"	f
GetPair	plugged/vim-polyglot/indent/typescript.vim	/^  function s:GetPair(start,end,flags,skip,...)$/;"	f
s:syng_strcom	plugged/vim-polyglot/indent/typescript.vim	/^let s:syng_strcom = 'string\\|comment\\|regex\\|special\\|doc\\|template\\%(braces\\)\\@!'$/;"	v
s:syng_str	plugged/vim-polyglot/indent/typescript.vim	/^let s:syng_str = 'string\\|template\\|special'$/;"	v
s:syng_com	plugged/vim-polyglot/indent/typescript.vim	/^let s:syng_com = 'comment\\|doc'$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/typescript.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),0),'name') =~? '".s:syng_strcom."'"$/;"	v
skip_func	plugged/vim-polyglot/indent/typescript.vim	/^function s:skip_func()$/;"	f
alternatePair	plugged/vim-polyglot/indent/typescript.vim	/^function s:alternatePair(stop)$/;"	f
save_pos	plugged/vim-polyglot/indent/typescript.vim	/^function s:save_pos(f,...)$/;"	f
syn_at	plugged/vim-polyglot/indent/typescript.vim	/^function s:syn_at(l,c)$/;"	f
looking_at	plugged/vim-polyglot/indent/typescript.vim	/^function s:looking_at()$/;"	f
token	plugged/vim-polyglot/indent/typescript.vim	/^function s:token()$/;"	f
previous_token	plugged/vim-polyglot/indent/typescript.vim	/^function s:previous_token()$/;"	f
others	plugged/vim-polyglot/indent/typescript.vim	/^function s:others(p)$/;"	f
tern_skip	plugged/vim-polyglot/indent/typescript.vim	/^function s:tern_skip(p)$/;"	f
tern_col	plugged/vim-polyglot/indent/typescript.vim	/^function s:tern_col(p)$/;"	f
label_col	plugged/vim-polyglot/indent/typescript.vim	/^function s:label_col()$/;"	f
s:opfirst	plugged/vim-polyglot/indent/typescript.vim	/^let s:opfirst = '^' . get(g:,'typescript_opfirst',$/;"	v
s:continuation	plugged/vim-polyglot/indent/typescript.vim	/^let s:continuation = get(g:,'typescript_continuation',$/;"	v
continues	plugged/vim-polyglot/indent/typescript.vim	/^function s:continues(ln,con)$/;"	f
Trim	plugged/vim-polyglot/indent/typescript.vim	/^function s:Trim(ln)$/;"	f
PrevCodeLine	plugged/vim-polyglot/indent/typescript.vim	/^function s:PrevCodeLine(lnum)$/;"	f
Balanced	plugged/vim-polyglot/indent/typescript.vim	/^function s:Balanced(lnum)$/;"	f
OneScope	plugged/vim-polyglot/indent/typescript.vim	/^function s:OneScope(lnum)$/;"	f
iscontOne	plugged/vim-polyglot/indent/typescript.vim	/^function s:iscontOne(i,num,cont)$/;"	f
IsBlock	plugged/vim-polyglot/indent/typescript.vim	/^function s:IsBlock()$/;"	f
GetTypescriptIndent	plugged/vim-polyglot/indent/typescript.vim	/^function GetTypescriptIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/haml.vim	/^let b:did_indent = 1$/;"	v
s:attributes	plugged/vim-polyglot/indent/haml.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:tag	plugged/vim-polyglot/indent/haml.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:haml_self_closing_tags	plugged/vim-polyglot/indent/haml.vim	/^  let g:haml_self_closing_tags = 'base|link|meta|br|hr|img|input'$/;"	v
GetHamlIndent	plugged/vim-polyglot/indent/haml.vim	/^function! GetHamlIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/erlang.vim	/^  let b:did_indent = 1$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
Log	plugged/vim-polyglot/indent/erlang.vim	/^function! s:Log(s)$/;"	f
CalcVCol	plugged/vim-polyglot/indent/erlang.vim	/^function! s:CalcVCol(line, first_index, last_index, vcol, tabstop)$/;"	f
GetTokensFromLine	plugged/vim-polyglot/indent/erlang.vim	/^function! s:GetTokensFromLine(line, string_continuation, atom_continuation,$/;"	f
GetIndtokenAtCol	plugged/vim-polyglot/indent/erlang.vim	/^function! s:GetIndtokenAtCol(indtokens, col)$/;"	f
Push	plugged/vim-polyglot/indent/erlang.vim	/^function! s:Push(stack, token)$/;"	f
Pop	plugged/vim-polyglot/indent/erlang.vim	/^function! s:Pop(stack)$/;"	f
s:all_tokens	plugged/vim-polyglot/indent/erlang.vim	/^let s:all_tokens = {}$/;"	v
s:file_name	plugged/vim-polyglot/indent/erlang.vim	/^let s:file_name = ''$/;"	v
s:last_changedtick	plugged/vim-polyglot/indent/erlang.vim	/^let s:last_changedtick = -1$/;"	v
ClearTokenCacheIfNeeded	plugged/vim-polyglot/indent/erlang.vim	/^function! s:ClearTokenCacheIfNeeded()$/;"	f
TokenizeLine	plugged/vim-polyglot/indent/erlang.vim	/^function! s:TokenizeLine(lnum, direction)$/;"	f
FindIndToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:FindIndToken(lnum, dir)$/;"	f
PrevIndToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:PrevIndToken(lnum, i)$/;"	f
NextIndToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:NextIndToken(lnum, i)$/;"	f
IndentError	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IndentError(msg, token, stack)$/;"	f
UnexpectedToken	plugged/vim-polyglot/indent/erlang.vim	/^function! s:UnexpectedToken(token, stack)$/;"	f
g:erlang_unexpected_token_indent	plugged/vim-polyglot/indent/erlang.vim	/^  let g:erlang_unexpected_token_indent = -1$/;"	v
IsLineStringContinuation	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IsLineStringContinuation(lnum)$/;"	f
IsLineAtomContinuation	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IsLineAtomContinuation(lnum)$/;"	f
IsCatchStandalone	plugged/vim-polyglot/indent/erlang.vim	/^function! s:IsCatchStandalone(lnum, i)$/;"	f
BeginElementFoundIfEmpty	plugged/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFoundIfEmpty(stack, token, curr_vcol, stored_vcol, sw)$/;"	f
BeginElementFound	plugged/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFound(stack, token, curr_vcol, stored_vcol, end_token, sw)$/;"	f
BeginningOfClauseFound	plugged/vim-polyglot/indent/erlang.vim	/^function! s:BeginningOfClauseFound(stack, token, stored_vcol, lnum, i)$/;"	f
g:erlang_indent_searchpair_timeout	plugged/vim-polyglot/indent/erlang.vim	/^let g:erlang_indent_searchpair_timeout = 2000$/;"	v
SearchPair	plugged/vim-polyglot/indent/erlang.vim	/^function! s:SearchPair(lnum, curr_col, start, middle, end)$/;"	f
SearchEndPair	plugged/vim-polyglot/indent/erlang.vim	/^function! s:SearchEndPair(lnum, curr_col)$/;"	f
ErlangCalcIndent	plugged/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent(lnum, stack)$/;"	f
ErlangCalcIndent2	plugged/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent2(lnum, stack)$/;"	f
ErlangIndent	plugged/vim-polyglot/indent/erlang.vim	/^function! ErlangIndent()$/;"	f
ErlangShowTokensInLine	plugged/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInLine(line)$/;"	f
ErlangShowTokensInCurrentLine	plugged/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInCurrentLine()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/elm.vim	/^let b:did_indent = 1$/;"	v
FindPair	plugged/vim-polyglot/indent/elm.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
GetElmIndent	plugged/vim-polyglot/indent/elm.vim	/^function! GetElmIndent()$/;"	f
s:jsindent	plugged/vim-polyglot/indent/html.vim	/^let s:jsindent = &indentexpr$/;"	v
s:cssindent	plugged/vim-polyglot/indent/html.vim	/^let s:cssindent = &indentexpr$/;"	v
b:did_indent	plugged/vim-polyglot/indent/html.vim	/^let b:did_indent = 1$/;"	v
s:tags	plugged/vim-polyglot/indent/html.vim	/^let s:tags = []$/;"	v
s:no_tags	plugged/vim-polyglot/indent/html.vim	/^let s:no_tags = []$/;"	v
s:omittable	plugged/vim-polyglot/indent/html.vim	/^let s:omittable = [ $/;"	v
s:html_noindent_tags	plugged/vim-polyglot/indent/html.vim	/^let s:html_noindent_tags = join(s:no_tags, '\\|')$/;"	v
s:html_noindent_tags	plugged/vim-polyglot/indent/html.vim	/^    let s:html_noindent_tags = s:html_noindent_tags.'\\|'.join(g:html_exclude_tags, '\\|')$/;"	v
s:html_indent_tags	plugged/vim-polyglot/indent/html.vim	/^let s:html_indent_tags = '[a-z_][a-z0-9_.-]*'$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
HtmlIndentPatternCount	plugged/vim-polyglot/indent/html.vim	/^func! <SID>HtmlIndentPatternCount(content, pattern)$/;"	f
HtmlIndentOpen	plugged/vim-polyglot/indent/html.vim	/^fun! <SID>HtmlIndentOpen(lnum, pattern)$/;"	f
HtmlIndentClose	plugged/vim-polyglot/indent/html.vim	/^fun! <SID>HtmlIndentClose(lnum, pattern)$/;"	f
HtmlIndentSelfClose	plugged/vim-polyglot/indent/html.vim	/^fun! <SID>HtmlIndentSelfClose(lnum, pattern)$/;"	f
HtmlIndentOpenAlt	plugged/vim-polyglot/indent/html.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentCloseAlt	plugged/vim-polyglot/indent/html.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentSum	plugged/vim-polyglot/indent/html.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
HtmlIndentGet	plugged/vim-polyglot/indent/html.vim	/^fun! HtmlIndentGet(lnum)$/;"	f
b:ran_once	plugged/vim-polyglot/indent/twig.vim	/^let b:ran_once = 1$/;"	v
s:baseIndentExpr	plugged/vim-polyglot/indent/twig.vim	/^let s:baseIndentExpr=&indentexpr$/;"	v
GetTwigIndent	plugged/vim-polyglot/indent/twig.vim	/^fun! GetTwigIndent(currentLineNumber)$/;"	f
CallBaseIndent	plugged/vim-polyglot/indent/twig.vim	/^function! s:CallBaseIndent()$/;"	f
FindPreviousOpenStructure	plugged/vim-polyglot/indent/twig.vim	/^function! s:FindPreviousOpenStructure(lineNumber)$/;"	f
StartStructure	plugged/vim-polyglot/indent/twig.vim	/^function! s:StartStructure(name)$/;"	f
EndStructure	plugged/vim-polyglot/indent/twig.vim	/^function! s:EndStructure(name)$/;"	f
Map	plugged/vim-polyglot/indent/twig.vim	/^function! s:Map(Fun, list)$/;"	f
BuildStructures	plugged/vim-polyglot/indent/twig.vim	/^fun! s:BuildStructures()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:bvars	plugged/vim-polyglot/indent/javascript.vim	/^let s:bvars = {$/;"	v
GetVars	plugged/vim-polyglot/indent/javascript.vim	/^function s:GetVars()$/;"	f
sw	plugged/vim-polyglot/indent/javascript.vim	/^  function s:sw()$/;"	f
sw	plugged/vim-polyglot/indent/javascript.vim	/^  function s:sw()$/;"	f
s:z	plugged/vim-polyglot/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:in_comm	plugged/vim-polyglot/indent/javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:rel	plugged/vim-polyglot/indent/javascript.vim	/^let s:rel = has('reltime')$/;"	v
GetPair	plugged/vim-polyglot/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
GetPair	plugged/vim-polyglot/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
SynAt	plugged/vim-polyglot/indent/javascript.vim	/^function s:SynAt(l,c)$/;"	f
ParseCino	plugged/vim-polyglot/indent/javascript.vim	/^function s:ParseCino(f)$/;"	f
SkipFunc	plugged/vim-polyglot/indent/javascript.vim	/^function s:SkipFunc()$/;"	f
AlternatePair	plugged/vim-polyglot/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
Nat	plugged/vim-polyglot/indent/javascript.vim	/^function s:Nat(int)$/;"	f
LookingAt	plugged/vim-polyglot/indent/javascript.vim	/^function s:LookingAt()$/;"	f
Token	plugged/vim-polyglot/indent/javascript.vim	/^function s:Token()$/;"	f
PreviousToken	plugged/vim-polyglot/indent/javascript.vim	/^function s:PreviousToken(...)$/;"	f
Pure	plugged/vim-polyglot/indent/javascript.vim	/^function s:Pure(f,...)$/;"	f
SearchLoop	plugged/vim-polyglot/indent/javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
ExprCol	plugged/vim-polyglot/indent/javascript.vim	/^function s:ExprCol()$/;"	f
s:opfirst	plugged/vim-polyglot/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:continuation	plugged/vim-polyglot/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
Continues	plugged/vim-polyglot/indent/javascript.vim	/^function s:Continues()$/;"	f
Balanced	plugged/vim-polyglot/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
OneScope	plugged/vim-polyglot/indent/javascript.vim	/^function s:OneScope()$/;"	f
DoWhile	plugged/vim-polyglot/indent/javascript.vim	/^function s:DoWhile()$/;"	f
IsContOne	plugged/vim-polyglot/indent/javascript.vim	/^function s:IsContOne(cont)$/;"	f
IsSwitch	plugged/vim-polyglot/indent/javascript.vim	/^function s:IsSwitch()$/;"	f
IsBlock	plugged/vim-polyglot/indent/javascript.vim	/^function s:IsBlock()$/;"	f
GetJavascriptIndent	plugged/vim-polyglot/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/racket.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/racket.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:did_indent	plugged/vim-polyglot/indent/nix.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/nix.vim	/^let s:cpo_save = &cpo$/;"	v
s:skip_syntax	plugged/vim-polyglot/indent/nix.vim	/^let s:skip_syntax = '\\%(Comment\\|String\\)$'$/;"	v
s:block_open	plugged/vim-polyglot/indent/nix.vim	/^let s:block_open  = '\\%({\\|[\\)'$/;"	v
s:block_close	plugged/vim-polyglot/indent/nix.vim	/^let s:block_close = '\\%(}\\|]\\)'$/;"	v
GetNixIndent	plugged/vim-polyglot/indent/nix.vim	/^function! GetNixIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
elixir#indent	plugged/vim-polyglot/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/nim.vim	/^let b:did_indent = 1$/;"	v
FindStartLine	plugged/vim-polyglot/indent/nim.vim	/^function! s:FindStartLine(fromln, pattern)$/;"	f
GetNimIndent	plugged/vim-polyglot/indent/nim.vim	/^function! GetNimIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/ocaml.vim	/^let b:did_indent = 1$/;"	v
s:beflet	plugged/vim-polyglot/indent/ocaml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|<-\\|=\\|;\\|(\\)\\s*$'$/;"	v
s:letpat	plugged/vim-polyglot/indent/ocaml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:letlim	plugged/vim-polyglot/indent/ocaml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:lim	plugged/vim-polyglot/indent/ocaml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:module	plugged/vim-polyglot/indent/ocaml.vim	/^let s:module = '\\<\\%(begin\\|sig\\|struct\\|object\\)\\>'$/;"	v
s:obj	plugged/vim-polyglot/indent/ocaml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:type	plugged/vim-polyglot/indent/ocaml.vim	/^let s:type = '^\\s*\\%(class\\|let\\|type\\)\\>.*='$/;"	v
GetLineWithoutFullComment	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
GetInd	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
FindPair	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindLet	plugged/vim-polyglot/indent/ocaml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
GetOCamlIndent	plugged/vim-polyglot/indent/ocaml.vim	/^function! GetOCamlIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/stylus.vim	/^let b:did_indent = 1$/;"	v
prevnonblanknoncomment	plugged/vim-polyglot/indent/stylus.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
count_braces	plugged/vim-polyglot/indent/stylus.vim	/^function s:count_braces(lnum, count_open)$/;"	f
GetStylusIndent	plugged/vim-polyglot/indent/stylus.vim	/^function! GetStylusIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/mako.vim	/^let b:did_indent = 1$/;"	v
IsInsidePythonBlock	plugged/vim-polyglot/indent/mako.vim	/^function IsInsidePythonBlock(startline)$/;"	f
GetMakoIndent	plugged/vim-polyglot/indent/mako.vim	/^function GetMakoIndent()$/;"	f
HtmlIndentPush	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
MakoIndentPush	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentPush(tag)$/;"	f
MatchCount	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MatchCount(expr, pat)$/;"	f
HtmlIndentOpen	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpen(lnum)$/;"	f
HtmlIndentClose	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentClose(lnum)$/;"	f
MakoIndentOpen	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentOpen(lnum)$/;"	f
MakoIndentClose	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentClose(lnum)$/;"	f
HtmlIndentOpenAlt	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentCloseAlt	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentSum	plugged/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/cabal.vim	/^let b:did_indent = 1$/;"	v
g:cabal_indent_section	plugged/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 2$/;"	v
g:cabal_indent_section	plugged/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 4$/;"	v
GetCabalIndent	plugged/vim-polyglot/indent/cabal.vim	/^function! GetCabalIndent()$/;"	f
s:cpo_save	plugged/vim-polyglot/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
b:eelixir_subtype_indentexpr	plugged/vim-polyglot/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	plugged/vim-polyglot/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
GetEelixirIndent	plugged/vim-polyglot/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/purescript.vim	/^let b:did_indent = 1$/;"	v
g:purescript_indent_if	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_if = 3$/;"	v
g:purescript_indent_case	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_case = 5$/;"	v
g:purescript_indent_let	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_let = 4$/;"	v
g:purescript_indent_in	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_in = 1$/;"	v
g:purescript_indent_where	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_where = 6$/;"	v
g:purescript_indent_do	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_do = 3$/;"	v
g:purescript_indent_dot	plugged/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_dot = 1$/;"	v
GetSynStack	plugged/vim-polyglot/indent/purescript.vim	/^function! s:GetSynStack(lnum, col)$/;"	f
GetPurescriptIndent	plugged/vim-polyglot/indent/purescript.vim	/^function! GetPurescriptIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/kotlin.vim	/^let b:did_indent = 1$/;"	v
GetKotlinIndent	plugged/vim-polyglot/indent/kotlin.vim	/^function! GetKotlinIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/lua.vim	/^let b:did_indent = 1$/;"	v
s:open_patt	plugged/vim-polyglot/indent/lua.vim	/^let s:open_patt = '\\C\\%(\\<\\%(function\\|if\\|repeat\\|do\\)\\>\\|(\\|{\\)'$/;"	v
s:middle_patt	plugged/vim-polyglot/indent/lua.vim	/^let s:middle_patt = '\\C\\<\\%(else\\|elseif\\)\\>'$/;"	v
s:close_patt	plugged/vim-polyglot/indent/lua.vim	/^let s:close_patt = '\\C\\%(\\<\\%(end\\|until\\)\\>\\|)\\|}\\)'$/;"	v
s:anon_func_start	plugged/vim-polyglot/indent/lua.vim	/^let s:anon_func_start = '\\S\\+\\s*[({].*\\<function\\s*(.*)\\s*$'$/;"	v
s:anon_func_end	plugged/vim-polyglot/indent/lua.vim	/^let s:anon_func_end = '\\<end\\%(\\s*[)}]\\)\\+'$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/lua.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~# 'luaComment\\\\|luaString'"$/;"	v
IsInCommentOrString	plugged/vim-polyglot/indent/lua.vim	/^function s:IsInCommentOrString(lnum, col)$/;"	f
PrevLineOfCode	plugged/vim-polyglot/indent/lua.vim	/^function s:PrevLineOfCode(lnum)$/;"	f
GetContents	plugged/vim-polyglot/indent/lua.vim	/^function s:GetContents(lnum)$/;"	f
GetLuaIndent	plugged/vim-polyglot/indent/lua.vim	/^function GetLuaIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/python.vim	/^let b:did_indent = 1$/;"	v
g:python_pep8_indent_multiline_string	plugged/vim-polyglot/indent/python.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
s:block_rules	plugged/vim-polyglot/indent/python.vim	/^let s:block_rules = {$/;"	v
s:block_rules_multiple	plugged/vim-polyglot/indent/python.vim	/^let s:block_rules_multiple = {$/;"	v
s:paren_pairs	plugged/vim-polyglot/indent/python.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
b:control_statement	plugged/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:control_statement	plugged/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
s:stop_statement	plugged/vim-polyglot/indent/python.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:skip_special_chars	plugged/vim-polyglot/indent/python.vim	/^let s:skip_special_chars = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_after_opening_paren	plugged/vim-polyglot/indent/python.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
is_concealed	plugged/vim-polyglot/indent/python.vim	/^function! s:is_concealed(line, col)$/;"	f
s:skip_special_chars	plugged/vim-polyglot/indent/python.vim	/^    let s:skip_special_chars .= '|| s:is_concealed(line("."), col("."))'$/;"	v
s:skip_search	plugged/vim-polyglot/indent/python.vim	/^let s:skip_search = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
sw	plugged/vim-polyglot/indent/python.vim	/^    function! s:sw()$/;"	f
sw	plugged/vim-polyglot/indent/python.vim	/^    function! s:sw()$/;"	f
pair_sort	plugged/vim-polyglot/indent/python.vim	/^function! s:pair_sort(x, y)$/;"	f
find_opening_paren	plugged/vim-polyglot/indent/python.vim	/^function! s:find_opening_paren(...)$/;"	f
find_start_of_multiline_statement	plugged/vim-polyglot/indent/python.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
find_start_of_block	plugged/vim-polyglot/indent/python.vim	/^function! s:find_start_of_block(lnum, types, multiple)$/;"	f
match_expr_on_line	plugged/vim-polyglot/indent/python.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
indent_like_opening_paren	plugged/vim-polyglot/indent/python.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
indent_like_block	plugged/vim-polyglot/indent/python.vim	/^function! s:indent_like_block(lnum)$/;"	f
indent_like_previous_line	plugged/vim-polyglot/indent/python.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
is_dedented_already	plugged/vim-polyglot/indent/python.vim	/^function! s:is_dedented_already(current, base)$/;"	f
is_python_string	plugged/vim-polyglot/indent/python.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
GetPythonPEPIndent	plugged/vim-polyglot/indent/python.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/pug.vim	/^let b:did_indent = 1$/;"	v
s:attributes	plugged/vim-polyglot/indent/pug.vim	/^let s:attributes = '\\%((.\\{-\\})\\)'$/;"	v
s:tag	plugged/vim-polyglot/indent/pug.vim	/^let s:tag = '\\([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:pug_self_closing_tags	plugged/vim-polyglot/indent/pug.vim	/^  let g:pug_self_closing_tags = 'meta|link|img|hr|br|input'$/;"	v
GetPugIndent	plugged/vim-polyglot/indent/pug.vim	/^function! GetPugIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/scala.vim	/^let b:did_indent = 1$/;"	v
s:defMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:defMatcher = '\\%(\\%(private\\|protected\\)\\%(\\[[^\\]]*\\]\\)\\?\\s\\+\\|abstract\\s\\+\\|override\\s\\+\\)*\\<def\\>'$/;"	v
s:funcNameMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:funcNameMatcher = '\\w\\+'$/;"	v
s:typeSpecMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:typeSpecMatcher = '\\%(\\s*\\[\\_[^\\]]*\\]\\)'$/;"	v
s:defArgMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:defArgMatcher = '\\%((\\_.\\{-})\\)'$/;"	v
s:returnTypeMatcher	plugged/vim-polyglot/indent/scala.vim	/^let s:returnTypeMatcher = '\\%(:\\s*\\w\\+' . s:typeSpecMatcher . '\\?\\)'$/;"	v
g:fullDefMatcher	plugged/vim-polyglot/indent/scala.vim	/^let g:fullDefMatcher = '^\\s*' . s:defMatcher . '\\s\\+' . s:funcNameMatcher . '\\s*' . s:typeSpecMatcher . '\\?\\s*' . s:defArgMatcher . '\\?\\s*' . s:returnTypeMatcher . '\\?\\s*[={]'$/;"	v
scala#ConditionalConfirm	plugged/vim-polyglot/indent/scala.vim	/^function! scala#ConditionalConfirm(msg)$/;"	f
scala#GetLine	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLine(lnum)$/;"	f
scala#CountBrackets	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CountBrackets(line, openBracket, closedBracket)$/;"	f
scala#CountParens	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CountParens(line)$/;"	f
scala#CountCurlies	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CountCurlies(line)$/;"	f
scala#LineEndsInIncomplete	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineEndsInIncomplete(line)$/;"	f
scala#LineIsAClosingXML	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineIsAClosingXML(line)$/;"	f
scala#LineCompletesXML	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesXML(lnum, line)$/;"	f
scala#IsParentCase	plugged/vim-polyglot/indent/scala.vim	/^function! scala#IsParentCase()$/;"	f
scala#CurlyMatcher	plugged/vim-polyglot/indent/scala.vim	/^function! scala#CurlyMatcher()$/;"	f
scala#GetLineAndColumnThatMatchesCurly	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesCurly()$/;"	f
scala#GetLineAndColumnThatMatchesParen	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesParen()$/;"	f
scala#GetLineAndColumnThatMatchesBracket	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineThatMatchesCurly	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesCurly()$/;"	f
scala#GetLineThatMatchesParen	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesParen()$/;"	f
scala#GetLineThatMatchesBracket	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#NumberOfBraceGroups	plugged/vim-polyglot/indent/scala.vim	/^function! scala#NumberOfBraceGroups(line)$/;"	f
scala#MatchesIncompleteDefValr	plugged/vim-polyglot/indent/scala.vim	/^function! scala#MatchesIncompleteDefValr(line)$/;"	f
scala#LineIsCompleteIf	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineIsCompleteIf(line)$/;"	f
scala#LineCompletesIfElse	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesIfElse(lnum, line)$/;"	f
scala#GetPrevCodeLine	plugged/vim-polyglot/indent/scala.vim	/^function! scala#GetPrevCodeLine(lnum)$/;"	f
scala#InvertBracketType	plugged/vim-polyglot/indent/scala.vim	/^function! scala#InvertBracketType(openBracket, closedBracket)$/;"	f
scala#Testhelper	plugged/vim-polyglot/indent/scala.vim	/^function! scala#Testhelper(lnum, line, openBracket, closedBracket, iteration)$/;"	f
scala#Test	plugged/vim-polyglot/indent/scala.vim	/^function! scala#Test(lnum, line, openBracket, closedBracket)$/;"	f
scala#LineCompletesDefValr	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesDefValr(lnum, line)$/;"	f
scala#SpecificLineCompletesBrackets	plugged/vim-polyglot/indent/scala.vim	/^function! scala#SpecificLineCompletesBrackets(lnum, openBracket, closedBracket)$/;"	f
scala#LineCompletesBrackets	plugged/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesBrackets(openBracket, closedBracket)$/;"	f
GetScalaIndent	plugged/vim-polyglot/indent/scala.vim	/^function! GetScalaIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/tex.vim	/^let b:did_indent = 1$/;"	v
s:list_envs	plugged/vim-polyglot/indent/tex.vim	/^let s:list_envs = ['itemize', 'enumerate', 'description']$/;"	v
s:open_pat	plugged/vim-polyglot/indent/tex.vim	/^let s:open_pat = '\\\\\\@<!\\%(\\\\begin\\|\\\\left\\a\\@!\\|\\\\(\\|\\\\\\[\\|{\\)'$/;"	v
s:close_pat	plugged/vim-polyglot/indent/tex.vim	/^let s:close_pat = '\\\\\\@<!\\%(\\\\end\\|\\\\right\\a\\@!\\|\\\\)\\|\\\\\\]\\|}\\)'$/;"	v
s:list_open_pat	plugged/vim-polyglot/indent/tex.vim	/^let s:list_open_pat = '\\\\\\@<!\\\\begin{\\%(' . join(s:list_envs, '\\|') . '\\)}'$/;"	v
s:list_close_pat	plugged/vim-polyglot/indent/tex.vim	/^let s:list_close_pat	= '\\\\\\@<!\\\\end{\\%(' . join(s:list_envs, '\\|') . '\\)}'$/;"	v
CountMatches	plugged/vim-polyglot/indent/tex.vim	/^function! s:CountMatches(str, pat)$/;"	f
LatexBox_TexIndent	plugged/vim-polyglot/indent/tex.vim	/^function! LatexBox_TexIndent()$/;"	f
Latexbox_CallIndent	plugged/vim-polyglot/indent/tex.vim	/^function! Latexbox_CallIndent()$/;"	f
LatexBox_Completion	plugged/vim-polyglot/indent/tex.vim	/^	augroup LatexBox_Completion$/;"	a
b:did_indent	plugged/vim-polyglot/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
s:DEFAULT_LEVEL	plugged/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = '-1'$/;"	v
s:DEFAULT_LEVEL	plugged/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = 'indent(prevnlnum)'$/;"	v
s:BEGIN_BLOCK_KEYWORD	plugged/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_KEYWORD = '\\C^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:COMPOUND_EXPRESSION	plugged/vim-polyglot/indent/coffee.vim	/^let s:COMPOUND_EXPRESSION = '\\C\\%([^-]-\\|[^+]+\\|[^\/]\/\\|[:=*%&|^<>]\\)\\s*'$/;"	v
s:BEGIN_BLOCK	plugged/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK = s:BEGIN_BLOCK_KEYWORD . '\\|' . s:COMPOUND_EXPRESSION$/;"	v
s:BEGIN_BLOCK_OP	plugged/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_OP = '[([{:=]$'$/;"	v
s:FUNCTION	plugged/vim-polyglot/indent/coffee.vim	/^let s:FUNCTION = '[-=]>$'$/;"	v
s:CONTINUATION_OP	plugged/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION_OP = '\\C\\%(\\<\\%(is\\|isnt\\|and\\|or\\)\\>\\|'$/;"	v
s:CONTINUATION	plugged/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION = s:CONTINUATION_OP . '\\|' . s:BEGIN_BLOCK_OP$/;"	v
s:BRACKET_CONTINUATION	plugged/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_CONTINUATION = '^\\s*[}\\])]\\s*' . s:CONTINUATION_OP$/;"	v
s:DOT_ACCESS	plugged/vim-polyglot/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:BREAK_BLOCK_OP	plugged/vim-polyglot/indent/coffee.vim	/^let s:BREAK_BLOCK_OP = '\\C^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:POSTFIX_CONDITION	plugged/vim-polyglot/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\C\\S\\s\\+\\zs\\<\\%(if\\|unless\\|when\\|while\\|until\\)\\>'$/;"	v
s:CONTAINED_THEN	plugged/vim-polyglot/indent/coffee.vim	/^let s:CONTAINED_THEN = '\\C[(\\[].\\{-}\\<then\\>.\\{-\\}[)\\]]'$/;"	v
s:ELSE_COND	plugged/vim-polyglot/indent/coffee.vim	/^let s:ELSE_COND = '\\C^\\s*else\\s\\+\\<\\%(if\\|unless\\)\\>'$/;"	v
s:SINGLE_LINE_ELSE	plugged/vim-polyglot/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '\\C^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:KEYWORD_PAIRS	plugged/vim-polyglot/indent/coffee.vim	/^let s:KEYWORD_PAIRS = [$/;"	v
s:BRACKET_PAIRS	plugged/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_PAIRS = {']': '\\[', '}': '{', ')': '('}$/;"	v
s:MAX_LOOKBACK	plugged/vim-polyglot/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:SYNTAX_STRING	plugged/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_COMMENT	plugged/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING_COMMENT	plugged/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:ShiftWidth	plugged/vim-polyglot/indent/coffee.vim	/^  let s:ShiftWidth = function('shiftwidth')$/;"	v
ShiftWidth	plugged/vim-polyglot/indent/coffee.vim	/^  function! s:ShiftWidth()$/;"	f
SyntaxName	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SyntaxName(lnum, col)$/;"	f
IsComment	plugged/vim-polyglot/indent/coffee.vim	/^function! s:IsComment(lnum, col)$/;"	f
IsString	plugged/vim-polyglot/indent/coffee.vim	/^function! s:IsString(lnum, col)$/;"	f
IsCommentOrString	plugged/vim-polyglot/indent/coffee.vim	/^function! s:IsCommentOrString(lnum, col)$/;"	f
SearchCode	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SearchCode(lnum, regex)$/;"	f
GetPrevNormalLine	plugged/vim-polyglot/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlnum)$/;"	f
SearchPair	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SearchPair(startlnum, lookback, skip, open, close)$/;"	f
ShouldSkip	plugged/vim-polyglot/indent/coffee.vim	/^function! s:ShouldSkip(startlnum, lnum, col)$/;"	f
SearchMatchingKeyword	plugged/vim-polyglot/indent/coffee.vim	/^function! s:SearchMatchingKeyword(startlnum, open, close)$/;"	f
GetTrimmedLine	plugged/vim-polyglot/indent/coffee.vim	/^function! s:GetTrimmedLine(lnum)$/;"	f
GetDefaultPolicy	plugged/vim-polyglot/indent/coffee.vim	/^function! s:GetDefaultPolicy(curlnum)$/;"	f
GetCoffeeIndent	plugged/vim-polyglot/indent/coffee.vim	/^function! GetCoffeeIndent(curlnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/slim.vim	/^let b:did_indent = 1$/;"	v
s:attributes	plugged/vim-polyglot/indent/slim.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:tag	plugged/vim-polyglot/indent/slim.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:haml_self_closing_tags	plugged/vim-polyglot/indent/slim.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
GetSlimIndent	plugged/vim-polyglot/indent/slim.vim	/^function! GetSlimIndent()$/;"	f
b:html_indent_usestate	plugged/vim-polyglot/indent/eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:eruby_subtype_indentexpr	plugged/vim-polyglot/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	plugged/vim-polyglot/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
s:cpo_sav	plugged/vim-polyglot/indent/eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
GetErubyIndent	plugged/vim-polyglot/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/rust.vim	/^let b:did_indent = 1$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/rust.vim	/^let s:save_cpo = &cpo$/;"	v
get_line_trimmed	plugged/vim-polyglot/indent/rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
is_string_comment	plugged/vim-polyglot/indent/rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
GetRustIndent	plugged/vim-polyglot/indent/rust.vim	/^function GetRustIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/proto.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/proto.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:did_indent	plugged/vim-polyglot/indent/swift.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/swift.vim	/^let s:cpo_save = &cpo$/;"	v
NumberOfMatches	plugged/vim-polyglot/indent/swift.vim	/^function! s:NumberOfMatches(char, string, index)$/;"	f
SyntaxNameAtPosition	plugged/vim-polyglot/indent/swift.vim	/^function! s:SyntaxNameAtPosition(line, column)$/;"	f
SyntaxName	plugged/vim-polyglot/indent/swift.vim	/^function! s:SyntaxName()$/;"	f
IsExcludedFromIndentAtPosition	plugged/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndentAtPosition(line, column)$/;"	f
IsExcludedFromIndent	plugged/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndent()$/;"	f
IsCommentLine	plugged/vim-polyglot/indent/swift.vim	/^function! s:IsCommentLine(lnum)$/;"	f
SwiftIndent	plugged/vim-polyglot/indent/swift.vim	/^function! SwiftIndent(...)$/;"	f
b:liquid_subtype_indentexpr	plugged/vim-polyglot/indent/liquid.vim	/^let b:liquid_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	plugged/vim-polyglot/indent/liquid.vim	/^let b:did_indent = 1$/;"	v
count	plugged/vim-polyglot/indent/liquid.vim	/^function! s:count(string,pattern)$/;"	f
GetLiquidIndent	plugged/vim-polyglot/indent/liquid.vim	/^function! GetLiquidIndent(...)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/cython.vim	/^let b:did_indent = 1$/;"	v
g:python_pep8_indent_multiline_string	plugged/vim-polyglot/indent/cython.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
s:block_rules	plugged/vim-polyglot/indent/cython.vim	/^let s:block_rules = {$/;"	v
s:block_rules_multiple	plugged/vim-polyglot/indent/cython.vim	/^let s:block_rules_multiple = {$/;"	v
s:paren_pairs	plugged/vim-polyglot/indent/cython.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
b:control_statement	plugged/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:control_statement	plugged/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
s:stop_statement	plugged/vim-polyglot/indent/cython.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:skip_special_chars	plugged/vim-polyglot/indent/cython.vim	/^let s:skip_special_chars = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_after_opening_paren	plugged/vim-polyglot/indent/cython.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
is_concealed	plugged/vim-polyglot/indent/cython.vim	/^function! s:is_concealed(line, col)$/;"	f
s:skip_special_chars	plugged/vim-polyglot/indent/cython.vim	/^    let s:skip_special_chars .= '|| s:is_concealed(line("."), col("."))'$/;"	v
s:skip_search	plugged/vim-polyglot/indent/cython.vim	/^let s:skip_search = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
sw	plugged/vim-polyglot/indent/cython.vim	/^    function! s:sw()$/;"	f
sw	plugged/vim-polyglot/indent/cython.vim	/^    function! s:sw()$/;"	f
pair_sort	plugged/vim-polyglot/indent/cython.vim	/^function! s:pair_sort(x, y)$/;"	f
find_opening_paren	plugged/vim-polyglot/indent/cython.vim	/^function! s:find_opening_paren(...)$/;"	f
find_start_of_multiline_statement	plugged/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
find_start_of_block	plugged/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_block(lnum, types, multiple)$/;"	f
match_expr_on_line	plugged/vim-polyglot/indent/cython.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
indent_like_opening_paren	plugged/vim-polyglot/indent/cython.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
indent_like_block	plugged/vim-polyglot/indent/cython.vim	/^function! s:indent_like_block(lnum)$/;"	f
indent_like_previous_line	plugged/vim-polyglot/indent/cython.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
is_dedented_already	plugged/vim-polyglot/indent/cython.vim	/^function! s:is_dedented_already(current, base)$/;"	f
is_python_string	plugged/vim-polyglot/indent/cython.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
GetPythonPEPIndent	plugged/vim-polyglot/indent/cython.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/qml.vim	/^let b:did_indent = 1$/;"	v
Trim	plugged/vim-polyglot/indent/qml.vim	/^function! Trim(line)$/;"	f
GetJsIndent	plugged/vim-polyglot/indent/qml.vim	/^function! GetJsIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/cmake.vim	/^let b:did_indent = 1$/;"	v
s:keepcpo	plugged/vim-polyglot/indent/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
CMakeGetIndent	plugged/vim-polyglot/indent/cmake.vim	/^fun! CMakeGetIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/ember-script.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/arduino.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/arduino.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:did_indent	plugged/vim-polyglot/indent/gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/gitconfig.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
GetGitconfigIndent	plugged/vim-polyglot/indent/gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/crystal.vim	/^let b:did_indent = 1$/;"	v
g:crystal_indent_access_modifier_style	plugged/vim-polyglot/indent/crystal.vim	/^  let g:crystal_indent_access_modifier_style = 'normal'$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/crystal.vim	/^let s:cpo_save = &cpo$/;"	v
s:syng_strcom	plugged/vim-polyglot/indent/crystal.vim	/^let s:syng_strcom = '\\<crystal\\%(Regexp\\|RegexpDelimiter\\|RegexpEscape' .$/;"	v
s:syng_string	plugged/vim-polyglot/indent/crystal.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	plugged/vim-polyglot/indent/crystal.vim	/^let s:syng_stringdoc =$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/crystal.vim	/^let s:skip_expr =$/;"	v
s:crystal_indent_keywords	plugged/vim-polyglot/indent/crystal.vim	/^let s:crystal_indent_keywords =$/;"	v
s:crystal_deindent_keywords	plugged/vim-polyglot/indent/crystal.vim	/^let s:crystal_deindent_keywords =$/;"	v
s:end_start_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:end_start_regex =$/;"	v
s:end_middle_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:end_middle_regex =$/;"	v
s:end_end_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>\\|{%\\s*\\<\\%(end\\)\\>'$/;"	v
s:end_skip_expr	plugged/vim-polyglot/indent/crystal.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:non_bracket_continuation_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:non_bracket_continuation_regex = '\\%([\\\\.,:*\/%+]\\|\\<and\\|\\<or\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:continuation_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:continuation_regex =$/;"	v
s:continuable_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:continuable_regex =$/;"	v
s:bracket_continuation_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_switch_continuation_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:splat_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:block_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:block_regex =$/;"	v
s:block_continuation_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:leading_operator_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:leading_operator_regex = '^\\s*[.]'$/;"	v
s:access_modifier_regex	plugged/vim-polyglot/indent/crystal.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
IsInStringOrComment	plugged/vim-polyglot/indent/crystal.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInString	plugged/vim-polyglot/indent/crystal.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringOrDocumentation	plugged/vim-polyglot/indent/crystal.vim	/^function s:IsInStringOrDocumentation(lnum, col)$/;"	f
IsInStringDelimiter	plugged/vim-polyglot/indent/crystal.vim	/^function s:IsInStringDelimiter(lnum, col)$/;"	f
PrevNonBlankNonString	plugged/vim-polyglot/indent/crystal.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
GetMSL	plugged/vim-polyglot/indent/crystal.vim	/^function s:GetMSL(lnum)$/;"	f
ExtraBrackets	plugged/vim-polyglot/indent/crystal.vim	/^function s:ExtraBrackets(lnum)$/;"	f
Match	plugged/vim-polyglot/indent/crystal.vim	/^function s:Match(lnum, regex)$/;"	f
FindContainingClass	plugged/vim-polyglot/indent/crystal.vim	/^function! s:FindContainingClass()$/;"	f
GetCrystalIndent	plugged/vim-polyglot/indent/crystal.vim	/^function GetCrystalIndent(...)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/vala.vim	/^let b:did_indent = 1$/;"	v
GetValaIndent	plugged/vim-polyglot/indent/vala.vim	/^function GetValaIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/clojure.vim	/^let b:did_indent = 1$/;"	v
s:save_cpo	plugged/vim-polyglot/indent/clojure.vim	/^let s:save_cpo = &cpo$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/clojure.vim	/^let b:undo_indent = 'setlocal autoindent< smartindent< expandtab< softtabstop< shiftwidth< indentexpr< indentkeys<'$/;"	v
g:clojure_maxlines	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_maxlines = 100$/;"	v
g:clojure_fuzzy_indent	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent = 1$/;"	v
g:clojure_fuzzy_indent_patterns	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']$/;"	v
g:clojure_fuzzy_indent_blacklist	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_blacklist = ['-fn$', '\\v^with-%(meta|out-str|loading-context)$']$/;"	v
g:clojure_special_indent_words	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_special_indent_words = 'deftype,defrecord,reify,proxy,extend-type,extend-protocol,letfn'$/;"	v
g:clojure_align_multiline_strings	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_multiline_strings = 0$/;"	v
g:clojure_align_subforms	plugged/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_subforms = 0$/;"	v
syn_id_name	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:syn_id_name()$/;"	f
ignored_region	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:ignored_region()$/;"	f
current_char	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:current_char()$/;"	f
current_word	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:current_word()$/;"	f
is_paren	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:is_paren()$/;"	f
match_one	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:match_one(patterns, string)$/;"	f
match_pairs	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
clojure_check_for_string_worker	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_check_for_string_worker()$/;"	f
check_for_string	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:check_for_string()$/;"	f
strip_namespace_and_macro_chars	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:strip_namespace_and_macro_chars(word)$/;"	f
clojure_is_method_special_case_worker	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_is_method_special_case_worker(position)$/;"	f
is_method_special_case	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:is_method_special_case(position)$/;"	f
is_reader_conditional_special_case	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:is_reader_conditional_special_case(position)$/;"	f
bracket_type	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:bracket_type(char)$/;"	f
clojure_indent_pos	plugged/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_indent_pos()$/;"	f
GetClojureIndent	plugged/vim-polyglot/indent/clojure.vim	/^	function! GetClojureIndent()$/;"	f
b:undo_indent	plugged/vim-polyglot/indent/clojure.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
b:did_indent	plugged/vim-polyglot/indent/plantuml.vim	/^let b:did_indent = 1$/;"	v
s:incIndent	plugged/vim-polyglot/indent/plantuml.vim	/^let s:incIndent =$/;"	v
s:decIndent	plugged/vim-polyglot/indent/plantuml.vim	/^let s:decIndent = '^\\s*\\%(end\\|else\\|}\\)'$/;"	v
GetPlantUMLIndent	plugged/vim-polyglot/indent/plantuml.vim	/^function! GetPlantUMLIndent(...) abort$/;"	f
insidePlantUMLTags	plugged/vim-polyglot/indent/plantuml.vim	/^function! s:insidePlantUMLTags(lnum) abort$/;"	f
b:did_indent	plugged/vim-polyglot/indent/markdown.vim	/^let b:did_indent = 1$/;"	v
IsMkdCode	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsMkdCode(lnum)$/;"	f
IsLiStart	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsLiStart(line)$/;"	f
IsHeaderLine	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsHeaderLine(line)$/;"	f
IsBlankLine	plugged/vim-polyglot/indent/markdown.vim	/^function! s:IsBlankLine(line)$/;"	f
PrevNonBlank	plugged/vim-polyglot/indent/markdown.vim	/^function! s:PrevNonBlank(lnum)$/;"	f
GetMarkdownIndent	plugged/vim-polyglot/indent/markdown.vim	/^function GetMarkdownIndent()$/;"	f
s:save_cpo	plugged/vim-polyglot/indent/ansible.vim	/^let s:save_cpo = &cpo$/;"	v
s:comment	plugged/vim-polyglot/indent/ansible.vim	/^let s:comment = '\\v^\\s*#' " # comment$/;"	v
s:array_entry	plugged/vim-polyglot/indent/ansible.vim	/^let s:array_entry = '\\v^\\s*-\\s' " - foo$/;"	v
s:named_module_entry	plugged/vim-polyglot/indent/ansible.vim	/^let s:named_module_entry = '\\v^\\s*-\\s*(name|hosts|role):\\s*\\S' " - name: 'do stuff'$/;"	v
s:dictionary_entry	plugged/vim-polyglot/indent/ansible.vim	/^let s:dictionary_entry = '\\v^\\s*[^:-]+:\\s*$' " with_items:$/;"	v
s:key_value	plugged/vim-polyglot/indent/ansible.vim	/^let s:key_value = '\\v^\\s*[^:-]+:\\s*\\S' " apt: name=package$/;"	v
s:scalar_value	plugged/vim-polyglot/indent/ansible.vim	/^let s:scalar_value = '\\v:\\s*[>|\\|]\\s*$' " shell: >$/;"	v
GetAnsibleIndent	plugged/vim-polyglot/indent/ansible.vim	/^function GetAnsibleIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/opencl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/terraform.vim	/^let b:did_indent = 1$/;"	v
TerraformIndent	plugged/vim-polyglot/indent/terraform.vim	/^function! TerraformIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/ps1.vim	/^let b:did_indent = 1$/;"	v
#	plugged/vim-polyglot/indent/ps1.vim	/^inoremap <buffer> # X#$/;"	m
b:undo_indent	plugged/vim-polyglot/indent/ps1.vim	/^let b:undo_indent = "setl si<"$/;"	v
b:did_indent	plugged/vim-polyglot/indent/nginx.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/vim-polyglot/indent/ls.vim	/^let b:did_indent = 1$/;"	v
s:INDENT_AFTER_KEYWORD	plugged/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:INDENT_AFTER_OPERATOR	plugged/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:CONTINUATION	plugged/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\|do\\)\\>$'$/;"	v
s:CONTINUATION_BLOCK	plugged/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:DOT_ACCESS	plugged/vim-polyglot/indent/ls.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:OUTDENT_AFTER	plugged/vim-polyglot/indent/ls.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:COMPOUND_ASSIGNMENT	plugged/vim-polyglot/indent/ls.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|until\\|'$/;"	v
s:POSTFIX_CONDITION	plugged/vim-polyglot/indent/ls.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:SINGLE_LINE_ELSE	plugged/vim-polyglot/indent/ls.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:MAX_LOOKBACK	plugged/vim-polyglot/indent/ls.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
SyntaxName	plugged/vim-polyglot/indent/ls.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
IsComment	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsComment(linenum, col)$/;"	f
IsString	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsString(linenum, col)$/;"	f
IsCommentOrString	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
IsCommentLine	plugged/vim-polyglot/indent/ls.vim	/^function! s:IsCommentLine(linenum)$/;"	f
SmartSearch	plugged/vim-polyglot/indent/ls.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
ShouldSkip	plugged/vim-polyglot/indent/ls.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
MaxLookback	plugged/vim-polyglot/indent/ls.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
SkipExpr	plugged/vim-polyglot/indent/ls.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
SearchPair	plugged/vim-polyglot/indent/ls.vim	/^function! s:SearchPair(start, end)$/;"	f
GetMatch	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetMatch(curline)$/;"	f
GetPrevNormalLine	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
GetTrimmedLine	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
GetLiveScriptIndent	plugged/vim-polyglot/indent/ls.vim	/^function! s:GetLiveScriptIndent(curlinenum)$/;"	f
GetLiveScriptIndent	plugged/vim-polyglot/indent/ls.vim	/^function! GetLiveScriptIndent(curlinenum)$/;"	f
b:undo_indent	plugged/vim-polyglot/indent/autohotkey.vim	/^let b:undo_indent = 'setlocal '.join([$/;"	v
s:TRUE	plugged/vim-polyglot/indent/autohotkey.vim	/^let s:TRUE = !0$/;"	v
s:FALSE	plugged/vim-polyglot/indent/autohotkey.vim	/^let s:FALSE = 0$/;"	v
IsBeginBlockByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsBeginBlockByStr(str)$/;"	f
IsEndBlockByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsEndBlockByStr(str)$/;"	f
IsDoubleCoronByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsDoubleCoronByStr(str)$/;"	f
IsReturnByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsReturnByStr(str)$/;"	f
IsIfStatementByStr	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsIfStatementByStr(str)$/;"	f
IsInsideOfBlockByNum	plugged/vim-polyglot/indent/autohotkey.vim	/^function! IsInsideOfBlockByNum(line_num)$/;"	f
AddIndentByInd	plugged/vim-polyglot/indent/autohotkey.vim	/^function! AddIndentByInd(indent)$/;"	f
UnIndentByInd	plugged/vim-polyglot/indent/autohotkey.vim	/^function! UnIndentByInd(indent)$/;"	f
GetAutoHotkeyIndent	plugged/vim-polyglot/indent/autohotkey.vim	/^function! GetAutoHotkeyIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/autohotkey.vim	/^let b:did_indent = 1$/;"	v
b:html_indent_usestate	plugged/vim-polyglot/indent/handlebars.vim	/^let b:html_indent_usestate = 0$/;"	v
b:handlebars_subtype_indentexpr	plugged/vim-polyglot/indent/handlebars.vim	/^let b:handlebars_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	plugged/vim-polyglot/indent/handlebars.vim	/^let b:did_indent = 1$/;"	v
b:did_indent_hbs	plugged/vim-polyglot/indent/handlebars.vim	/^let b:did_indent_hbs = 1$/;"	v
GetHandlebarsIndent	plugged/vim-polyglot/indent/handlebars.vim	/^function! GetHandlebarsIndent(...)$/;"	f
b:jst_subtype_indentexpr	plugged/vim-polyglot/indent/jst.vim	/^let b:jst_subtype_indentexpr = &l:indentexpr$/;"	v
b:did_indent	plugged/vim-polyglot/indent/jst.vim	/^let b:did_indent = 1$/;"	v
GetJstIndent	plugged/vim-polyglot/indent/jst.vim	/^function! GetJstIndent(...)$/;"	f
get_indentexpr	plugged/vim-polyglot/indent/vue.vim	/^function! s:get_indentexpr(language)$/;"	f
s:languages	plugged/vim-polyglot/indent/vue.vim	/^let s:languages = [$/;"	v
s:language	plugged/vim-polyglot/indent/vue.vim	/^    let s:language.indentexpr = s:get_indentexpr(s:language.name)$/;"	v
s:html_indent	plugged/vim-polyglot/indent/vue.vim	/^let s:html_indent = s:get_indentexpr('html')$/;"	v
b:did_indent	plugged/vim-polyglot/indent/vue.vim	/^let b:did_indent = 1$/;"	v
GetVueIndent	plugged/vim-polyglot/indent/vue.vim	/^function! GetVueIndent()$/;"	f
s:skipPatterns	plugged/vim-polyglot/indent/julia.vim	/^let s:skipPatterns = '\\<julia\\%(Comprehension\\%(For\\|If\\)\\|RangeEnd\\|CommentL\\|\\%([bsv]\\|ip\\|big\\|MIME\\|Shell\\|Printf\\|Doc\\)\\=String\\|RegEx\\|SymbolS\\?\\)\\>'$/;"	v
JuliaMatch	plugged/vim-polyglot/indent/julia.vim	/^function JuliaMatch(lnum, str, regex, st, ...)$/;"	f
GetJuliaNestingStruct	plugged/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingStruct(lnum, ...)$/;"	f
GetJuliaNestingBrackets	plugged/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingBrackets(lnum, c)$/;"	f
s:bracketBlocks	plugged/vim-polyglot/indent/julia.vim	/^let s:bracketBlocks = '\\<julia\\%(\\%(\\%(Printf\\)\\?Par\\|SqBra\\|CurBra\\)Block\\|ParBlockInRange\\|StringVars\\%(Par\\|SqBra\\|CurBra\\)\\|Dollar\\%(Par\\|SqBra\\)\\|QuotedParBlockS\\?\\)\\>'$/;"	v
IsInBrackets	plugged/vim-polyglot/indent/julia.vim	/^function IsInBrackets(lnum, c)$/;"	f
LastBlockIndent	plugged/vim-polyglot/indent/julia.vim	/^function LastBlockIndent(lnum)$/;"	f
GetJuliaIndent	plugged/vim-polyglot/indent/julia.vim	/^function GetJuliaIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/slime.vim	/^let b:did_indent = 1$/;"	v
s:attributes	plugged/vim-polyglot/indent/slime.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:tag	plugged/vim-polyglot/indent/slime.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
g:haml_self_closing_tags	plugged/vim-polyglot/indent/slime.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
GetSlimeIndent	plugged/vim-polyglot/indent/slime.vim	/^function! GetSlimeIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/solidity.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/solidity.vim	/^let s:cpo_save = &cpo$/;"	v
s:js_keywords	plugged/vim-polyglot/indent/solidity.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\|else\\|finally\\|for\\|function\\|if\\|in\\|instanceof\\|new\\|return\\|switch\\|this\\|throw\\|try\\|typeof\\|var\\|void\\|while\\|with\\)'$/;"	v
s:syng_strcom	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_string	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_multiline	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_linecom	plugged/vim-polyglot/indent/solidity.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/solidity.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:line_term	plugged/vim-polyglot/indent/solidity.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:continuation_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:msl_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:msl_regex = '\\%([\\\\*+\/.:([]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:one_line_scope_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:block_regex	plugged/vim-polyglot/indent/solidity.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:var_stmt	plugged/vim-polyglot/indent/solidity.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:comma_first	plugged/vim-polyglot/indent/solidity.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_last	plugged/vim-polyglot/indent/solidity.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:ternary	plugged/vim-polyglot/indent/solidity.vim	/^let s:ternary = '^\\s\\+[?|:]'$/;"	v
s:ternary_q	plugged/vim-polyglot/indent/solidity.vim	/^let s:ternary_q = '^\\s\\+?'$/;"	v
IsInStringOrComment	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInString	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInMultilineComment	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsInMultilineComment(lnum, col)$/;"	f
IsLineComment	plugged/vim-polyglot/indent/solidity.vim	/^function s:IsLineComment(lnum, col)$/;"	f
PrevNonBlankNonString	plugged/vim-polyglot/indent/solidity.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
GetMSL	plugged/vim-polyglot/indent/solidity.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
RemoveTrailingComments	plugged/vim-polyglot/indent/solidity.vim	/^function s:RemoveTrailingComments(content)$/;"	f
InMultiVarStatement	plugged/vim-polyglot/indent/solidity.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
GetVarIndent	plugged/vim-polyglot/indent/solidity.vim	/^function s:GetVarIndent(lnum)$/;"	f
LineHasOpeningBrackets	plugged/vim-polyglot/indent/solidity.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
Match	plugged/vim-polyglot/indent/solidity.vim	/^function s:Match(lnum, regex)$/;"	f
IndentWithContinuation	plugged/vim-polyglot/indent/solidity.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
InOneLineScope	plugged/vim-polyglot/indent/solidity.vim	/^function s:InOneLineScope(lnum)$/;"	f
ExitingOneLineScope	plugged/vim-polyglot/indent/solidity.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
GetSolidityIndent	plugged/vim-polyglot/indent/solidity.vim	/^function GetSolidityIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/fsharp.vim	/^let b:did_indent = 1$/;"	v
GetLineWithoutFullComment	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
GetInd	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
FindPair	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindLet	plugged/vim-polyglot/indent/fsharp.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
GetFsharpIndent	plugged/vim-polyglot/indent/fsharp.vim	/^function! GetFsharpIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/perl.vim	/^let b:did_indent = 1$/;"	v
b:indent_use_syntax	plugged/vim-polyglot/indent/perl.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/perl.vim	/^let s:cpo_save = &cpo$/;"	v
GetPerlIndent	plugged/vim-polyglot/indent/perl.vim	/^function! GetPerlIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/json.vim	/^let b:did_indent = 1$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/json.vim	/^let s:cpo_save = &cpo$/;"	v
s:line_term	plugged/vim-polyglot/indent/json.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:block_regex	plugged/vim-polyglot/indent/json.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
IsInString	plugged/vim-polyglot/indent/json.vim	/^function s:IsInString(lnum, col)$/;"	f
PrevNonBlankNonString	plugged/vim-polyglot/indent/json.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
LineHasOpeningBrackets	plugged/vim-polyglot/indent/json.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
Match	plugged/vim-polyglot/indent/json.vim	/^function s:Match(lnum, regex)$/;"	f
GetJSONIndent	plugged/vim-polyglot/indent/json.vim	/^function GetJSONIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/puppet.vim	/^let b:did_indent = 1$/;"	v
PartOfInclude	plugged/vim-polyglot/indent/puppet.vim	/^function! s:PartOfInclude(lnum)$/;"	f
OpenBrace	plugged/vim-polyglot/indent/puppet.vim	/^function! s:OpenBrace(lnum)$/;"	f
GetPuppetIndent	plugged/vim-polyglot/indent/puppet.vim	/^function! GetPuppetIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/litcoffee.vim	/^let b:did_indent = 1$/;"	v
GetLitCoffeeIndent	plugged/vim-polyglot/indent/litcoffee.vim	/^function GetLitCoffeeIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
g:ruby_indent_access_modifier_style	plugged/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	plugged/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	plugged/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_block_style = 'expression'$/;"	v
s:cpo_save	plugged/vim-polyglot/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:syng_string	plugged/vim-polyglot/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	plugged/vim-polyglot/indent/ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:syng_strcom	plugged/vim-polyglot/indent/ruby.vim	/^let s:syng_strcom = s:syng_stringdoc +$/;"	v
s:skip_expr	plugged/vim-polyglot/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:ruby_indent_keywords	plugged/vim-polyglot/indent/ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_deindent_keywords	plugged/vim-polyglot/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:end_start_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:end_middle_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_end_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_skip_expr	plugged/vim-polyglot/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:non_bracket_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:continuable_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:continuable_regex =$/;"	v
s:bracket_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:dot_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:backslash_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:bracket_switch_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:splat_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:access_modifier_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_access_modifier_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:block_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:block_continuation_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:leading_operator_regex	plugged/vim-polyglot/indent/ruby.vim	/^let s:leading_operator_regex = '^\\s*[.]'$/;"	v
GetRubyIndent	plugged/vim-polyglot/indent/ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
AccessModifier	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
ClosingBracketOnEmptyLine	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
BlockComment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
DeindentingKeyword	plugged/vim-polyglot/indent/ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
MultilineStringOrLineComment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
ClosingHeredocDelimiter	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
LeadingOperator	plugged/vim-polyglot/indent/ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
EmptyInsideString	plugged/vim-polyglot/indent/ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
StartOfFile	plugged/vim-polyglot/indent/ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
AfterAccessModifier	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
ContinuedLine	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
AfterBlockOpening	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
AfterLeadingOperator	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
AfterHangingSplat	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
AfterUnbalancedBracket	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
AfterEndKeyword	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
AfterIndentKeyword	plugged/vim-polyglot/indent/ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
PreviousNotMSL	plugged/vim-polyglot/indent/ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
IndentingKeywordInMSL	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
ContinuedHangingOperator	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
IsInRubyGroup	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
IsInStringOrComment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
IsInString	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
IsInStringOrDocumentation	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
IsInStringDelimiter	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
IsAssignment	plugged/vim-polyglot/indent/ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
PrevNonBlankNonString	plugged/vim-polyglot/indent/ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
GetMSL	plugged/vim-polyglot/indent/ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
ExtraBrackets	plugged/vim-polyglot/indent/ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
Match	plugged/vim-polyglot/indent/ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
FindContainingClass	plugged/vim-polyglot/indent/ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
GetGoHTMLTmplIndent	plugged/vim-polyglot/indent/gohtmltmpl.vim	/^function! GetGoHTMLTmplIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/cucumber.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/cucumber.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
syn	plugged/vim-polyglot/indent/cucumber.vim	/^function! s:syn(lnum)$/;"	f
GetCucumberIndent	plugged/vim-polyglot/indent/cucumber.vim	/^function! GetCucumberIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/go.vim	/^let b:did_indent = 1$/;"	v
sw	plugged/vim-polyglot/indent/go.vim	/^  func s:sw()$/;"	f
sw	plugged/vim-polyglot/indent/go.vim	/^  func s:sw()$/;"	f
GoIndent	plugged/vim-polyglot/indent/go.vim	/^function! GoIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/dart.vim	/^let b:did_indent = 1$/;"	v
b:undo_indent	plugged/vim-polyglot/indent/dart.vim	/^let b:undo_indent = 'setl cin< cino<'$/;"	v
DartIndent	plugged/vim-polyglot/indent/dart.vim	/^function! DartIndent()$/;"	f
b:did_indent	plugged/vim-polyglot/indent/caddyfile.vim	/^let b:did_indent = 1$/;"	v
sw	plugged/vim-polyglot/indent/caddyfile.vim	/^	function! s:sw()$/;"	f
sw	plugged/vim-polyglot/indent/caddyfile.vim	/^	function! s:sw()$/;"	f
GetCaddyfileIndent	plugged/vim-polyglot/indent/caddyfile.vim	/^function! GetCaddyfileIndent(lnum)$/;"	f
b:did_indent	plugged/vim-polyglot/indent/haskell.vim	/^let b:did_indent = 1$/;"	v
g:haskell_indent_if	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_if = 3$/;"	v
g:haskell_indent_case	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_case = 2$/;"	v
g:haskell_indent_let	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_let = 4$/;"	v
g:haskell_indent_let_no_in	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_let_no_in = 4$/;"	v
g:haskell_indent_where	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_where = 6$/;"	v
g:haskell_indent_do	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_do = 3$/;"	v
g:haskell_indent_in	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_in = 1$/;"	v
g:haskell_indent_guard	plugged/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_guard = 2$/;"	v
isInBlock	plugged/vim-polyglot/indent/haskell.vim	/^function! s:isInBlock(hlstack)$/;"	f
stripComment	plugged/vim-polyglot/indent/haskell.vim	/^function! s:stripComment(line)$/;"	f
isSYN	plugged/vim-polyglot/indent/haskell.vim	/^function! s:isSYN(grp, line, col)$/;"	f
getNesting	plugged/vim-polyglot/indent/haskell.vim	/^function! s:getNesting(hlstack)$/;"	f
getHLStack	plugged/vim-polyglot/indent/haskell.vim	/^function! s:getHLStack(line, col)$/;"	f
indentMatching	plugged/vim-polyglot/indent/haskell.vim	/^function! s:indentMatching(char)$/;"	f
indentGuard	plugged/vim-polyglot/indent/haskell.vim	/^function! s:indentGuard(pos, prevline)$/;"	f
GetHaskellIndent	plugged/vim-polyglot/indent/haskell.vim	/^function! GetHaskellIndent()$/;"	f
s:htmlindent	plugged/vim-polyglot/indent/blade.vim	/^let s:htmlindent = &indentexpr$/;"	v
s:phpindent	plugged/vim-polyglot/indent/blade.vim	/^let s:phpindent = &indentexpr$/;"	v
b:did_indent	plugged/vim-polyglot/indent/blade.vim	/^let b:did_indent = 1$/;"	v
s:directives_start	plugged/vim-polyglot/indent/blade.vim	/^let s:directives_start = 'if\\|else\\|unless\\|for\\|while\\|empty\\|push\\|section\\|can\\|hasSection\\|verbatim\\|php\\|' .$/;"	v
s:directives_end	plugged/vim-polyglot/indent/blade.vim	/^let s:directives_end = 'else\\|end\\|empty\\|show\\|stop\\|append\\|overwrite'$/;"	v
s:directives_start	plugged/vim-polyglot/indent/blade.vim	/^    let s:directives_start .= '\\|' . join(keys(g:blade_custom_directives_pairs), '\\|')$/;"	v
s:directives_end	plugged/vim-polyglot/indent/blade.vim	/^    let s:directives_end .= '\\|' . join(values(g:blade_custom_directives_pairs), '\\|')$/;"	v
IsStartingDelimiter	plugged/vim-polyglot/indent/blade.vim	/^function! s:IsStartingDelimiter(lnum)$/;"	f
GetBladeIndent	plugged/vim-polyglot/indent/blade.vim	/^function! GetBladeIndent()$/;"	f
s:coffeeIndentExpr	plugged/vim-polyglot/after/indent/html.vim	/^let s:coffeeIndentExpr = &l:indentexpr$/;"	v
s:htmlIndentExpr	plugged/vim-polyglot/after/indent/html.vim	/^let s:htmlIndentExpr = &l:indentexpr$/;"	v
GetCoffeeHtmlIndent	plugged/vim-polyglot/after/indent/html.vim	/^function! GetCoffeeHtmlIndent(curlinenum)$/;"	f
s:save_cpo	plugged/vim-polyglot/after/indent/objc.vim	/^let s:save_cpo = &cpo$/;"	v
s:topLev	plugged/vim-polyglot/after/indent/objc.vim	/^let s:topLev = '^\\s*@\\%(class\\|end\\|implementation\\|interface\\|protocol\\|\\)\\>'$/;"	v
GetObjCIndentImproved	plugged/vim-polyglot/after/indent/objc.vim	/^function! GetObjCIndentImproved()$/;"	f
b:jsx_js_indentexpr	plugged/vim-polyglot/after/indent/jsx.vim	/^let b:jsx_js_indentexpr = &indentexpr$/;"	v
s:did_indent	plugged/vim-polyglot/after/indent/jsx.vim	/^  let s:did_indent=b:did_indent$/;"	v
b:did_indent	plugged/vim-polyglot/after/indent/jsx.vim	/^  let b:did_indent=s:did_indent$/;"	v
s:endtag	plugged/vim-polyglot/after/indent/jsx.vim	/^let s:endtag = '^\\s*\\\/\\?>\\s*;\\='$/;"	v
SynSOL	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! SynSOL(lnum)$/;"	f
SynEOL	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! SynEOL(lnum)$/;"	f
SynAttrXMLish	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! SynAttrXMLish(synattr)$/;"	f
SynXMLish	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! SynXMLish(syns)$/;"	f
SynJSXBlockEnd	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! SynJSXBlockEnd(syns)$/;"	f
SynJSXDepth	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! SynJSXDepth(syns)$/;"	f
SynJSXContinues	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! SynJSXContinues(cursyn, prevsyn)$/;"	f
GetJsxIndent	plugged/vim-polyglot/after/indent/jsx.vim	/^fu! GetJsxIndent()$/;"	f
s:current_syntax_save	plugged/vim-polyglot/after/syntax/haml.vim	/^  let s:current_syntax_save = b:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/haml.vim	/^  let b:current_syntax = s:current_syntax_save$/;"	v
s:current_syntax_save	plugged/vim-polyglot/after/syntax/html.vim	/^  let s:current_syntax_save = b:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/html.vim	/^  let b:current_syntax = s:current_syntax_save$/;"	v
g:less_html_style_tags	plugged/vim-polyglot/after/syntax/html.vim	/^  let g:less_html_style_tags = 1$/;"	v
s:pre_less_cur_syn	plugged/vim-polyglot/after/syntax/html.vim	/^   let s:pre_less_cur_syn = b:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/html.vim	/^   let b:current_syntax = s:pre_less_cur_syn$/;"	v
s:current_syntax	plugged/vim-polyglot/after/syntax/coffee.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/coffee.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
s:needs_cppstructure_match	plugged/vim-polyglot/after/syntax/cpp.vim	/^let s:needs_cppstructure_match = 0$/;"	v
s:needs_cppstructure_match	plugged/vim-polyglot/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 1$/;"	v
s:needs_cppstructure_match	plugged/vim-polyglot/after/syntax/cpp.vim	/^	let s:needs_cppstructure_match += 2$/;"	v
did_cpp_syntax_inits	plugged/vim-polyglot/after/syntax/cpp.vim	/^    let did_cpp_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/after/syntax/cpp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
s:current_syntax	plugged/vim-polyglot/after/syntax/jsx.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/jsx.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/after/syntax/rspec.vim	/^let b:current_syntax = 'rspec'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	plugged/vim-polyglot/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
b:match_ignorecase	plugged/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	plugged/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:match_ignorecase	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_words	plugged/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
g:terraform_align	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  let g:terraform_align = 0$/;"	v
g:terraform_remap_spacebar	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  let g:terraform_remap_spacebar = 0$/;"	v
g:terraform_fold_sections	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  let g:terraform_fold_sections = 0$/;"	v
=	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  inoremap <buffer> <silent> = =<Esc>:call <SID>terraformalign()<CR>a$/;"	m
terraformalign	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  function! s:terraformalign()$/;"	f
TerraformFolds	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  function! TerraformFolds()$/;"	f
TerraformFoldText	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  function! TerraformFoldText()$/;"	f
<space>	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  nnoremap <space> za$/;"	m
<space>	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  onoremap <space> <C-C>za$/;"	m
<space>	plugged/vim-polyglot/after/ftplugin/terraform.vim	/^  vnoremap <space> zf$/;"	m
g:puppet_align_hashes	plugged/vim-polyglot/after/ftplugin/puppet.vim	/^    let g:puppet_align_hashes = 1$/;"	v
>	plugged/vim-polyglot/after/ftplugin/puppet.vim	/^    inoremap <buffer> <silent> > ><Esc>:call <SID>puppetalign()<CR>a$/;"	m
puppetalign	plugged/vim-polyglot/after/ftplugin/puppet.vim	/^    function! s:puppetalign()$/;"	f
main_syntax	plugged/vim-polyglot/syntax/typescript.vim	/^  let main_syntax = "typescript"$/;"	v
did_typescript_syn_inits	plugged/vim-polyglot/syntax/typescript.vim	/^    let did_typescript_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/typescript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/typescript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/typescript.vim	/^let b:current_syntax = "typescript"$/;"	v
g:ragel_default_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^  let g:ragel_default_subtype = 'c'$/;"	v
Split	plugged/vim-polyglot/syntax/ragel.vim	/^function! <SID>Split(path) abort " {{{1$/;"	f
ReadOnPath	plugged/vim-polyglot/syntax/ragel.vim	/^fun! <SID>ReadOnPath(script)$/;"	f
s:lines	plugged/vim-polyglot/syntax/ragel.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^  let b:ragel_subtype = matchstr(s:lines, 'ragel_subtype=\\zs\\w\\+')$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.rl\\|\\.ragel\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'ruby'$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'objc'$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'cpp'$/;"	v
b:ragel_subtype	plugged/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = g:ragel_default_subtype$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ragel.vim	/^let b:current_syntax = "ragel"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/haml.vim	/^  let main_syntax = 'haml'$/;"	v
b:ruby_no_expensive	plugged/vim-polyglot/syntax/haml.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/haml.vim	/^let b:current_syntax = "haml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vifm.vim	/^let b:current_syntax = 'vifm'$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/vifm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
b:erlang_syntax_synced	plugged/vim-polyglot/syntax/erlang.vim	/^let b:erlang_syntax_synced = 1$/;"	v
s:old_style	plugged/vim-polyglot/syntax/erlang.vim	/^let s:old_style = (exists("g:erlang_old_style_highlight") &&$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/erlang.vim	/^let b:current_syntax = "erlang"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/elm.vim	/^let b:current_syntax = 'elm'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xs.vim	/^let b:current_syntax = "xs"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vimgo.vim	/^let b:current_syntax = "vimgo"$/;"	v
b:main_syntax	plugged/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = b:current_syntax$/;"	v
b:main_syntax	plugged/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = 'twig'$/;"	v
did_twig_syn_inits	plugged/vim-polyglot/syntax/twig.vim	/^    let did_twig_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
did_javascript_syn_inits	plugged/vim-polyglot/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
did_racket_syntax_inits	plugged/vim-polyglot/syntax/racket.vim	/^    let did_racket_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/racket.vim	/^let b:current_syntax = "racket"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nix.vim	/^let b:current_syntax = "nix"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/sxhkdrc.vim	/^let b:current_syntax = "sxhkdrc"$/;"	v
CheckForFunctions	plugged/vim-polyglot/syntax/octave.vim	/^function! s:CheckForFunctions()$/;"	f
did_octave_syntax_inits	plugged/vim-polyglot/syntax/octave.vim	/^    let did_octave_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/octave.vim	/^let b:current_syntax = "octave"$/;"	v
s:ps1xml_cpo_save	plugged/vim-polyglot/syntax/ps1xml.vim	/^let s:ps1xml_cpo_save = &cpo$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ps1xml.vim	/^let b:current_syntax = "ps1xml"$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/c.vim	/^let s:cpo_save = &cpo$/;"	v
s:ft	plugged/vim-polyglot/syntax/c.vim	/^let s:ft = matchstr(&ft, '^\\([^.]\\)\\+')$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	plugged/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/c.vim	/^let b:current_syntax = "c"$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
g:elixir_use_markdown_for_docs	plugged/vim-polyglot/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
g:jinja_syntax_html	plugged/vim-polyglot/syntax/jinja2.vim	/^   let g:jinja_syntax_html=1$/;"	v
main_syntax	plugged/vim-polyglot/syntax/jinja2.vim	/^  let main_syntax = 'jinja'$/;"	v
did_jinja_syn_inits	plugged/vim-polyglot/syntax/jinja2.vim	/^    let did_jinja_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/jinja2.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/jinja2.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/jinja2.vim	/^let b:current_syntax = "jinja"$/;"	v
nim_highlight_numbers	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers = 1$/;"	v
nim_highlight_builtins	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins = 1$/;"	v
nim_highlight_exceptions	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions = 1$/;"	v
nim_highlight_space_errors	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_space_errors = 1$/;"	v
nim_highlight_special_vars	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_special_vars = 1$/;"	v
nim_highlight_numbers	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers      = 1$/;"	v
nim_highlight_builtins	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins     = 1$/;"	v
nim_highlight_exceptions	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions   = 1$/;"	v
nim_highlight_space_errors	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_space_errors = 1$/;"	v
nim_highlight_special_vars	plugged/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_special_vars = 1$/;"	v
did_nim_syn_inits	plugged/vim-polyglot/syntax/nim.vim	/^    let did_nim_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/nim.vim	/^let b:current_syntax = "nim"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/mason.vim	/^	let main_syntax = 'mason'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/mason.vim	/^let b:current_syntax = "mason"$/;"	v
did_ocaml_syntax_inits	plugged/vim-polyglot/syntax/ocaml.vim	/^    let did_ocaml_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/ocaml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/ocaml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/ocaml.vim	/^let b:current_syntax = "ocaml"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/stylus.vim	/^  let main_syntax = 'css'$/;"	v
did_css_syn_inits	plugged/vim-polyglot/syntax/stylus.vim	/^    let did_css_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/stylus.vim	/^let b:current_syntax = "stylus"$/;"	v
b:mako_outer_lang	plugged/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = g:mako_default_outer_lang$/;"	v
b:mako_outer_lang	plugged/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = "html"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/mako.vim	/^  let main_syntax = b:mako_outer_lang$/;"	v
did_mako_syn_inits	plugged/vim-polyglot/syntax/mako.vim	/^    let did_mako_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/mako.vim	/^let b:current_syntax = b:mako_outer_lang$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/fish.vim	/^let b:current_syntax = 'fish'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/apiblueprint.vim	/^let b:current_syntax = 'apiblueprint'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cabal.vim	/^let b:current_syntax = "cabal"$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
main_syntax	plugged/vim-polyglot/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
g:eelixir_default_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
s:lines	plugged/vim-polyglot/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	plugged/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/groovy.vim	/^  let main_syntax='groovy'$/;"	v
GroovyHiLink	plugged/vim-polyglot/syntax/groovy.vim	/^  command! -nargs=+ GroovyHiLink hi link <args>$/;"	c
GroovyHiLink	plugged/vim-polyglot/syntax/groovy.vim	/^  command! -nargs=+ GroovyHiLink hi def link <args>$/;"	c
groovy_minlines	plugged/vim-polyglot/syntax/groovy.vim	/^  let groovy_minlines = 10$/;"	v
did_groovy_syn_inits	plugged/vim-polyglot/syntax/groovy.vim	/^    let did_groovy_syn_inits = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/groovy.vim	/^let b:current_syntax = "groovy"$/;"	v
b:spell_options	plugged/vim-polyglot/syntax/groovy.vim	/^let b:spell_options="contained"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/purescript.vim	/^let b:current_syntax = "purescript"$/;"	v
cry_minlines	plugged/vim-polyglot/syntax/cryptol.vim	/^  let cry_minlines = 50$/;"	v
did_cry_syntax_inits	plugged/vim-polyglot/syntax/cryptol.vim	/^    let did_cry_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/cryptol.vim	/^let b:current_syntax = "cryptol"$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/mma.vim	/^let s:cpo_save = &cpo$/;"	v
did_mma_syn_inits	plugged/vim-polyglot/syntax/mma.vim	/^		let did_mma_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/mma.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/mma.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/mma.vim	/^let b:current_syntax = "mma"$/;"	v
did_pgsql_syn_inits	plugged/vim-polyglot/syntax/pgsql.vim	/^    let did_pgsql_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/pgsql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/pgsql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/pgsql.vim	/^let b:current_syntax = "pgsql"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/kotlin.vim	/^let b:current_syntax = "kotlin"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/godefstack.vim	/^let b:current_syntax = "godefstack"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/lua.vim	/^  let main_syntax = 'lua'$/;"	v
FoldableRegion	plugged/vim-polyglot/syntax/lua.vim	/^function! s:FoldableRegion(tag, name, expr)$/;"	f
did_lua_syn_inits	plugged/vim-polyglot/syntax/lua.vim	/^    let did_lua_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/lua.vim	/^let b:current_syntax = "lua"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible_hosts.vim	/^let b:current_syntax = "ansible_hosts"$/;"	v
Python2Syntax	plugged/vim-polyglot/syntax/python.vim	/^command! -buffer Python2Syntax let b:python_version_2 = 1 | let &syntax=&syntax$/;"	c
Python3Syntax	plugged/vim-polyglot/syntax/python.vim	/^command! -buffer Python3Syntax let b:python_version_2 = 0 | let &syntax=&syntax$/;"	c
EnableByDefault	plugged/vim-polyglot/syntax/python.vim	/^function! s:EnableByDefault(name)$/;"	f
Enabled	plugged/vim-polyglot/syntax/python.vim	/^function! s:Enabled(name)$/;"	f
Python2Syntax	plugged/vim-polyglot/syntax/python.vim	/^function! s:Python2Syntax()$/;"	f
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^  let s:funcs_re = '__import__|abs|all|any|bin|callable|chr|classmethod|compile|complex|delattr|dir|divmod|enumerate|eval|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|locals|map|max|memoryview|min|next|oct|open|ord|pow|property|range|repr|reversed|round|setattr|slice|sorted|staticmethod|sum|super|type|vars|zip'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^    let s:funcs_re .= '|apply|basestring|buffer|cmp|coerce|execfile|file|intern|long|raw_input|reduce|reload|unichr|unicode|xrange'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^      let s:funcs_re .= '|print'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^      let s:funcs_re .= '|ascii|exec|print'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^  let s:funcs_re = 'syn match pythonBuiltinFunc ''\\v\\.@<!\\zs<%(' . s:funcs_re . ')>'$/;"	v
s:funcs_re	plugged/vim-polyglot/syntax/python.vim	/^      let s:funcs_re .= '\\=@!'$/;"	v
s:exs_re	plugged/vim-polyglot/syntax/python.vim	/^    let s:exs_re = 'BaseException|Exception|ArithmeticError|LookupError|EnvironmentError|AssertionError|AttributeError|BufferError|EOFError|FloatingPointError|GeneratorExit|IOError|ImportError|IndexError|KeyError|KeyboardInterrupt|MemoryError|NameError|NotImplementedError|OSError|OverflowError|ReferenceError|RuntimeError|StopIteration|SyntaxError|IndentationError|TabError|SystemError|SystemExit|TypeError|UnboundLocalError|UnicodeError|UnicodeEncodeError|UnicodeDecodeError|UnicodeTranslateError|ValueError|VMSError|WindowsError|ZeroDivisionError|Warning|UserWarning|BytesWarning|DeprecationWarning|PendingDepricationWarning|SyntaxWarning|RuntimeWarning|FutureWarning|ImportWarning|UnicodeWarning'$/;"	v
s:exs_re	plugged/vim-polyglot/syntax/python.vim	/^      let s:exs_re .= '|StandardError'$/;"	v
s:exs_re	plugged/vim-polyglot/syntax/python.vim	/^      let s:exs_re .= '|BlockingIOError|ChildProcessError|ConnectionError|BrokenPipeError|ConnectionAbortedError|ConnectionRefusedError|ConnectionResetError|FileExistsError|FileNotFoundError|InterruptedError|IsADirectoryError|NotADirectoryError|PermissionError|ProcessLookupError|TimeoutError|StopAsyncIteration|ResourceWarning'$/;"	v
did_python_syn_inits	plugged/vim-polyglot/syntax/python.vim	/^    let did_python_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/python.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/python.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/python.vim	/^let b:current_syntax = 'python'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/pug.vim	/^  let main_syntax = 'pug'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pug.vim	/^let b:current_syntax = "pug"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/emblem.vim	/^  let main_syntax = 'emblem'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/emblem.vim	/^let b:current_syntax = 'emblem'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gotexttmpl.vim	/^let b:current_syntax = "gotexttmpl"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/haxe.vim	/^  let main_syntax='haxe'$/;"	v
HaxeHiLink	plugged/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi link <args>$/;"	c
HaxeHiLink	plugged/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi def link <args>$/;"	c
haxe_minlines	plugged/vim-polyglot/syntax/haxe.vim	/^  let haxe_minlines = 5000$/;"	v
did_haxe_syn_inits	plugged/vim-polyglot/syntax/haxe.vim	/^    let did_haxe_syn_inits = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/haxe.vim	/^let b:current_syntax = "haxe"$/;"	v
b:spell_options	plugged/vim-polyglot/syntax/haxe.vim	/^let b:spell_options="contained"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tt2html.vim	/^let b:current_syntax = "tt2html"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/scala.vim	/^  let main_syntax = 'scala'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = "scala"$/;"	v
ContainedGroup	plugged/vim-polyglot/syntax/scala.vim	/^function! s:ContainedGroup()$/;"	f
b:current_syntax	plugged/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = 'scala'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/coffee.vim	/^  let b:current_syntax = 'coffee'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/slim.vim	/^  let main_syntax = 'slim'$/;"	v
b:ruby_no_expensive	plugged/vim-polyglot/syntax/slim.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slim.vim	/^let b:current_syntax = "slim"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
g:eruby_default_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
s:lines	plugged/vim-polyglot/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_nest_level	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	plugged/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/eruby.vim	/^let b:current_syntax = 'eruby'$/;"	v
did_vbnet_syntax_inits	plugged/vim-polyglot/syntax/vbnet.vim	/^        let did_vbnet_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/vbnet.vim	/^let b:current_syntax = "vbnet"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cpp.vim	/^let b:current_syntax = "cpp"$/;"	v
b:tt2_syn_tags	plugged/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_tags = '\\[% %]'$/;"	v
b:tt2_syn_inc_perl	plugged/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_inc_perl = 1$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/tt2.vim	/^let s:cpo_save = &cpo$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^    let s:str = b:tt2_syn_tags . ' '$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,'^ \\+','','g')$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,' \\+',' ','g')$/;"	v
s:st	plugged/vim-polyglot/syntax/tt2.vim	/^        let s:st = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^        let s:str = substitute(s:str,'[^ ]* ','',"")$/;"	v
s:ed	plugged/vim-polyglot/syntax/tt2.vim	/^        let s:ed = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:str	plugged/vim-polyglot/syntax/tt2.vim	/^        let s:str = substitute(s:str,'[^ ]* ','',"")$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tt2.vim	/^let b:current_syntax = "tt2"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rust.vim	/^let b:current_syntax = "rust"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/ansible_template.vim	/^  let main_syntax = 'jinja2'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible_template.vim	/^let b:current_syntax = ''$/;"	v
s:extra_syntax	plugged/vim-polyglot/syntax/ansible_template.vim	/^  let s:extra_syntax = split(g:ansible_extra_syntaxes)$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible_template.vim	/^    let b:current_syntax = ''$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible_template.vim	/^let b:current_syntax = "ansible_template"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/json5.vim	/^  let b:current_syntax = 'json5'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/glsl.vim	/^  let b:current_syntax = "glsl"$/;"	v
did_proto_syn_inits	plugged/vim-polyglot/syntax/proto.vim	/^    let did_proto_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/proto.vim	/^let b:current_syntax = "proto"$/;"	v
did_thrift_syn_inits	plugged/vim-polyglot/syntax/thrift.vim	/^    let did_thrift_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/thrift.vim	/^let b:current_syntax = "thrift"$/;"	v
CommentKeywordMatch	plugged/vim-polyglot/syntax/swift.vim	/^function! s:CommentKeywordMatch(keyword)$/;"	f
b:current_syntax	plugged/vim-polyglot/syntax/swift.vim	/^let b:current_syntax = "swift"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/liquid.vim	/^  let main_syntax = 'liquid'$/;"	v
g:liquid_default_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
s:lines	plugged/vim-polyglot/syntax/liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
g:liquid_highlight_types	plugged/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_highlight_types = []$/;"	v
s:subtype	plugged/vim-polyglot/syntax/liquid.vim	/^  let s:subtype = exists('b:liquid_subtype') ? b:liquid_subtype : ''$/;"	v
b:	plugged/vim-polyglot/syntax/liquid.vim	/^      let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:liquid_subtype	plugged/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = s:subtype$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/liquid.vim	/^let b:current_syntax = 'liquid'$/;"	v
did_gnuplot_syntax_inits	plugged/vim-polyglot/syntax/gnuplot.vim	/^    let did_gnuplot_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
TAPTestLine_foldtext	plugged/vim-polyglot/syntax/tap.vim	/^function! TAPTestLine_foldtext()$/;"	f
did_tapverboseoutput_syntax_inits	plugged/vim-polyglot/syntax/tap.vim	/^  let did_tapverboseoutput_syntax_inits = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tap.vim	/^let b:current_syntax="tapVerboseOutput"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gmpl.vim	/^let b:current_syntax = "gmpl"$/;"	v
did_cql_syn_inits	plugged/vim-polyglot/syntax/cql.vim	/^    let did_cql_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/cql.vim	/^let b:current_syntax = "cql"$/;"	v
b:Xsl_SyntaxFold_by	plugged/vim-polyglot/syntax/xsl.vim	/^	let b:Xsl_SyntaxFold_by=''$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/xsl.vim	/^let b:current_syntax = "xsl"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/qml.vim	/^  let main_syntax = 'qml'$/;"	v
did_qml_syn_inits	plugged/vim-polyglot/syntax/qml.vim	/^    let did_qml_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/qml.vim	/^let b:current_syntax = "qml"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/rnoweb.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jasmine.vim	/^let b:current_syntax = "jasmine"$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/cmake.vim	/^let b:current_syntax = "cmake"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/velocity.vim	/^  let main_syntax = 'html'$/;"	v
did_velocity_syn_inits	plugged/vim-polyglot/syntax/velocity.vim	/^    let did_velocity_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/velocity.vim	/^let b:current_syntax = "velocity"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ember-script.vim	/^let b:current_syntax = 'ember-script'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:crystal_no_expensive	plugged/vim-polyglot/syntax/crystal.vim	/^  let b:crystal_no_expensive = 1$/;"	v
g:crystal_minlines	plugged/vim-polyglot/syntax/crystal.vim	/^    let g:crystal_minlines = 500$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/crystal.vim	/^let b:current_syntax = 'crystal'$/;"	v
s:vala_cpo_save	plugged/vim-polyglot/syntax/vala.vim	/^let s:vala_cpo_save = &cpo$/;"	v
b:vala_minlines	plugged/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = vala_minlines$/;"	v
b:vala_minlines	plugged/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = 50$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/vala.vim	/^let b:current_syntax = "vala"$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/clojure.vim	/^let s:cpo_sav = &cpo$/;"	v
s:clojure_syntax_keywords	plugged/vim-polyglot/syntax/clojure.vim	/^let s:clojure_syntax_keywords = {$/;"	v
syntax_keyword	plugged/vim-polyglot/syntax/clojure.vim	/^function! s:syntax_keyword(dict)$/;"	f
s:radix_chars	plugged/vim-polyglot/syntax/clojure.vim	/^let s:radix_chars = "0123456789abcdefghijklmnopqrstuvwxyz"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/clojure.vim	/^let b:current_syntax = "clojure"$/;"	v
s:cpo_orig	plugged/vim-polyglot/syntax/plantuml.vim	/^let s:cpo_orig=&cpo$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/plantuml.vim	/^let b:current_syntax = 'plantuml'$/;"	v
HtmlHiLink	plugged/vim-polyglot/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlHiLink	plugged/vim-polyglot/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/mustache.vim	/^let b:current_syntax = "mustache"$/;"	v
HtmlHiLink	plugged/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlHiLink	plugged/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
s:conceal	plugged/vim-polyglot/syntax/markdown.vim	/^let s:conceal = ''$/;"	v
s:concealends	plugged/vim-polyglot/syntax/markdown.vim	/^let s:concealends = ''$/;"	v
s:conceal	plugged/vim-polyglot/syntax/markdown.vim	/^  let s:conceal = ' conceal'$/;"	v
s:concealends	plugged/vim-polyglot/syntax/markdown.vim	/^  let s:concealends = ' concealends'$/;"	v
s:oneline	plugged/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ''$/;"	v
s:oneline	plugged/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ' oneline'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/markdown.vim	/^let b:current_syntax = "mkd"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^  let main_syntax = 'yaml'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^let b:current_syntax = ''$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^let b:current_syntax = ''$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^let b:current_syntax = ''$/;"	v
normal_keywords_highlight	plugged/vim-polyglot/syntax/ansible.vim	/^fun! s:normal_keywords_highlight(name)$/;"	f
with_keywords_highlight	plugged/vim-polyglot/syntax/ansible.vim	/^fun! s:with_keywords_highlight(name)$/;"	f
attribute_highlight	plugged/vim-polyglot/syntax/ansible.vim	/^fun! s:attribute_highlight(attributes)$/;"	f
b:current_syntax	plugged/vim-polyglot/syntax/ansible.vim	/^let b:current_syntax = "ansible"$/;"	v
carp_syntax_init	plugged/vim-polyglot/syntax/carp.vim	/^    let carp_syntax_init = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/carp.vim	/^let b:current_syntax = "carp"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/opencl.vim	/^let b:current_syntax = "opencl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dockerfile.vim	/^let b:current_syntax = "dockerfile"$/;"	v
s:current_syntax	plugged/vim-polyglot/syntax/dockerfile.vim	/^let s:current_syntax = b:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/dockerfile.vim	/^let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/terraform.vim	/^let b:current_syntax = "terraform"$/;"	v
did_ps1_syn_inits	plugged/vim-polyglot/syntax/ps1.vim	/^		let did_ps1_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/ps1.vim	/^let b:current_syntax = "ps1"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:eruby_subtype	plugged/vim-polyglot/syntax/nginx.vim	/^let b:eruby_subtype = ''$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ls.vim	/^let b:current_syntax = "ls"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ls.vim	/^  let b:current_syntax = 'livescript'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/php.vim	/^  let main_syntax = 'php'$/;"	v
s:iskeyword_save	plugged/vim-polyglot/syntax/php.vim	/^let s:iskeyword_save = &iskeyword$/;"	v
php_html_load	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_load=1$/;"	v
php_html_in_heredoc	plugged/vim-polyglot/syntax/php.vim	/^    let php_html_in_heredoc=1$/;"	v
php_html_in_nowdoc	plugged/vim-polyglot/syntax/php.vim	/^    let php_html_in_nowdoc=1$/;"	v
php_html_in_strings	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_in_strings=0$/;"	v
php_html_in_heredoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_in_heredoc=0$/;"	v
php_html_in_nowdoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_html_in_nowdoc=0$/;"	v
php_sync_method	plugged/vim-polyglot/syntax/php.vim	/^    let php_sync_method=php_minlines$/;"	v
php_sync_method	plugged/vim-polyglot/syntax/php.vim	/^    let php_sync_method=-1$/;"	v
php_sql_heredoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_sql_heredoc=1$/;"	v
php_sql_nowdoc	plugged/vim-polyglot/syntax/php.vim	/^  let php_sql_nowdoc=1$/;"	v
b:sql_type_override	plugged/vim-polyglot/syntax/php.vim	/^    let b:sql_type_override='mysql'$/;"	v
php_folding	plugged/vim-polyglot/syntax/php.vim	/^  let php_folding = 0$/;"	v
php_phpdoc_folding	plugged/vim-polyglot/syntax/php.vim	/^  let php_phpdoc_folding = 0$/;"	v
SynFold	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args> fold$/;"	c
SynFold	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args>$/;"	c
SynFoldDoc	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args> fold$/;"	c
SynFoldDoc	plugged/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args>$/;"	c
g:php_syntax_extensions_enabled	plugged/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_enabled = ["bcmath", "bz2", "core", "curl", "date", "dom", "ereg", "gd", "gettext", "hash", "iconv", "json", "libxml", "mbstring", "mcrypt", "mhash", "mysql", "mysqli", "openssl", "pcre", "pdo", "pgsql", "phar", "reflection", "session", "simplexml", "soap", "sockets", "spl", "sqlite3", "standard", "tokenizer", "wddx", "xml", "xmlreader", "xmlwriter", "zip", "zlib"]$/;"	v
g:php_syntax_extensions_disabled	plugged/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_disabled = []$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/php.vim	/^let b:current_syntax = "php"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/jst.vim	/^  let main_syntax = 'jst'$/;"	v
g:jst_default_subtype	plugged/vim-polyglot/syntax/jst.vim	/^  let g:jst_default_subtype = "html"$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(&filetype,'^jst\\.\\zs\\w\\+')$/;"	v
s:lines	plugged/vim-polyglot/syntax/jst.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(s:lines,'jst_subtype=\\zs\\w\\+')$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.jst\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'haml'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'ruby'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'yaml'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'javascript'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'text'$/;"	v
b:jst_subtype	plugged/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = g:jst_default_subtype$/;"	v
b:jst_nest_level	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:jst_nest_level	plugged/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/jst.vim	/^let b:current_syntax = 'jst'$/;"	v
b:match_ignorecase	plugged/vim-polyglot/syntax/jst.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_words	plugged/vim-polyglot/syntax/jst.vim	/^  let b:match_words = '<:>,' .$/;"	v
attr	plugged/vim-polyglot/syntax/vue.vim	/^function! s:attr(name, value)$/;"	f
syntax_available	plugged/vim-polyglot/syntax/vue.vim	/^function! s:syntax_available(language)$/;"	f
register_language	plugged/vim-polyglot/syntax/vue.vim	/^function! s:register_language(language, tag, ...)$/;"	f
b:current_syntax	plugged/vim-polyglot/syntax/vue.vim	/^let b:current_syntax = "vue"$/;"	v
d	plugged/vim-polyglot/syntax/julia.vim	/^  function! s:d(x)$/;"	f
d	plugged/vim-polyglot/syntax/julia.vim	/^  function! s:d(x)$/;"	f
b:julia_syntax_version	plugged/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = get(g:, "default_julia_version", "current")$/;"	v
b:julia_syntax_highlight_deprecated	plugged/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_highlight_deprecated = get(g:, "julia_syntax_highlight_deprecated", 0)$/;"	v
b:julia_syntax_version	plugged/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 6$/;"	v
b:julia_syntax_version	plugged/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 7$/;"	v
b:julia_syntax_version	plugged/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 5$/;"	v
b:julia_syntax_version	plugged/vim-polyglot/syntax/julia.vim	/^  let b:julia_syntax_version = 6$/;"	v
s:julia_spellcheck_strings	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_strings = get(g:, "julia_spellcheck_strings", 0)$/;"	v
s:julia_spellcheck_docstrings	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_docstrings = get(g:, "julia_spellcheck_docstrings", 1)$/;"	v
s:julia_spellcheck_comments	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_comments = get(g:, "julia_spellcheck_comments", 1)$/;"	v
s:julia_highlight_operators	plugged/vim-polyglot/syntax/julia.vim	/^let s:julia_highlight_operators = get(g:, "julia_highlight_operators", 1)$/;"	v
s:nonid_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:nonidS_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:uniop_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜"$/;"	v
s:binop_chars	plugged/vim-polyglot/syntax/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←→∋∌⊕⊖⊞⊟∘∧⊗⊘↑↓∨⊠±"$/;"	v
s:binop_chars_extra	plugged/vim-polyglot/syntax/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U21A6\\\\U21AE\\\\U21CE\\\\U21CF\\\\U21D2\\\\U21D4\\\\U21F4-\\\\U21FF\\\\U2208-\\\\U220D\\\\U2213\\\\U2214\\\\U2217-\\\\U2219\\\\U221D\\\\U2224-\\\\U222A\\\\U2237\\\\U2238\\\\U223A\\\\U223B\\\\U223D\\\\U223E\\\\U2240-\\\\U228B\\\\U228D-\\\\U229C\\\\U229E-\\\\U22A3\\\\U22A9\\\\U22AC\\\\U22AE\\\\U22B0-\\\\U22B7\\\\U22BB-\\\\U22BD\\\\U22C4-\\\\U22C7\\\\U22C9-\\\\U22D3\\\\U22D5-\\\\U22ED\\\\U22F2-\\\\U22FF\\\\U25B7\\\\U27C8\\\\U27C9\\\\U27D1\\\\U27D2\\\\U27D5-\\\\U27D7\\\\U27F0\\\\U27F1\\\\U27F5-\\\\U27F7\\\\U27F7\\\\U27F9-\\\\U27FF\\\\U2900-\\\\U2918\\\\U291D-\\\\U2920\\\\U2944-\\\\U2970\\\\U29B7\\\\U29B8\\\\U29BC\\\\U29BE-\\\\U29C1\\\\U29E1\\\\U29E3-\\\\U29E5\\\\U29F4\\\\U29F6\\\\U29F7\\\\U29FA\\\\U29FB\\\\U2A07\\\\U2A08\\\\U2A1D\\\\U2A22-\\\\U2A2E\\\\U2A30-\\\\U2A3D\\\\U2A40-\\\\U2A45\\\\U2A4A-\\\\U2A58\\\\U2A5A-\\\\U2A63\\\\U2A66\\\\U2A67\\\\U2A6A-\\\\U2AD9\\\\U2ADB\\\\U2AF7-\\\\U2AFA\\\\U2B30-\\\\U2B44\\\\U2B47-\\\\U2B4C\\\\UFFE9-\\\\UFFEC"$/;"	v
s:idregex	plugged/vim-polyglot/syntax/julia.vim	/^let s:idregex = '\\%([^' . s:nonidS_chars . '0-9!?' . s:uniop_chars . s:binop_chars . '][^' . s:nonidS_chars . s:uniop_chars . s:binop_chars . s:binop_chars_extra . ']*\\|\\<?\\>\\)'$/;"	v
s:operators	plugged/vim-polyglot/syntax/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
s:keywords	plugged/vim-polyglot/syntax/julia.vim	/^  let s:keywords = '\\<\\%(return\\|local\\|global\\|import\\%(all\\)\\?\\|export\\|using\\|const\\|where\\)\\>'$/;"	v
s:infixkeywords	plugged/vim-polyglot/syntax/julia.vim	/^  let s:infixkeywords = '\\<\\%(in\\|isa\\)\\>'$/;"	v
s:keywords	plugged/vim-polyglot/syntax/julia.vim	/^  let s:keywords = '\\<\\%(return\\|local\\|global\\|import\\%(all\\)\\?\\|export\\|using\\|const\\)\\>'$/;"	v
s:infixkeywords	plugged/vim-polyglot/syntax/julia.vim	/^  let s:infixkeywords = '\\<\\%(in\\)\\>'$/;"	v
s:dec_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:dec_regex = '\\d\\%(_\\?\\d\\)*\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:hex_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:hex_regex = '0x\\x\\%(_\\?\\x\\)*\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:bin_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:bin_regex = '0b[01]\\%(_\\?[01]\\)*\\%(\\>\\|im\\>\\|\\ze[^01]\\)'$/;"	v
s:oct_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:oct_regex = '0o\\o\\%(_\\?\\o\\)*\\%(\\>\\|im\\>\\|\\ze\\O\\)'$/;"	v
s:int_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:int_regex = '\\%(' . s:hex_regex .$/;"	v
s:float_regex1	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex1 = '\\.\\d\\%(_\\?\\d\\)*\\%([eEf][-+]\\?\\d\\+\\)\\?\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_regex2	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex2 = '\\d\\%(_\\?\\d\\)*\\.\\%(\\d\\%(_\\?\\d\\)*\\)\\?\\%([eEf][-+]\\?\\d\\+\\)\\?\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_regex3	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex3 = '\\d\\%(_\\?\\d\\)*[eEf][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:hexfloat_regex1	plugged/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex1 = '0x\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?[pP][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:hexfloat_regex2	plugged/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex2 = '0x\\x\\%(_\\?\\x\\)*\\%\\(\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?\\)\\?[pP][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:float_regex	plugged/vim-polyglot/syntax/julia.vim	/^let s:float_regex = '\\%(' . s:float_regex3 .$/;"	v
s:interp_dollar	plugged/vim-polyglot/syntax/julia.vim	/^let s:interp_dollar = '\\([' . s:nonidS_chars . s:uniop_chars . s:binop_chars . '!?]\\|^\\)\\@'.s:d(1).'<=\\$'$/;"	v
s:quotable	plugged/vim-polyglot/syntax/julia.vim	/^let s:quotable = '\\%(' . s:idregex . '\\|?\\|' . s:operators . '\\|' . s:float_regex . '\\|' . s:int_regex . '\\)'$/;"	v
s:quoting_colon	plugged/vim-polyglot/syntax/julia.vim	/^let s:quoting_colon = '\\%(\\%(^\\s*\\|\\s\\{6,\\}\\|[' . s:nonid_chars . s:uniop_chars . s:binop_chars . '?]\\s*\\)\\@'.s:d(6).'<=\\|\\%(\\<\\%(return\\|if\\|else\\%(if\\)\\?\\|while\\|try\\|begin\\)\\s*\\)\\@'.s:d(9).'<=\\)\\zs:'$/;"	v
s:quoting_colonS	plugged/vim-polyglot/syntax/julia.vim	/^let s:quoting_colonS = '\\s\\@'.s:d(1).'<=:'$/;"	v
h	plugged/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version >= 6 ? "Type" : "NONE"$/;"	v
h	plugged/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version == 5 ? "Type" : b:julia_syntax_version == 6 ? "juliaDeprecated" : "NONE"$/;"	v
h	plugged/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version <= 6 ? "Type" : "juliaDeprecated"$/;"	v
h	plugged/vim-polyglot/syntax/julia.vim	/^  let h = b:julia_syntax_version >= 7 ? "Type" : "NONE"$/;"	v
h	plugged/vim-polyglot/syntax/julia.vim	/^let h = b:julia_syntax_version <= 6 ? "Constant" : "NONE"$/;"	v
h	plugged/vim-polyglot/syntax/julia.vim	/^let h = b:julia_syntax_version >= 7 ? "Constant" : "NONE"$/;"	v
h	plugged/vim-polyglot/syntax/julia.vim	/^let h = b:julia_syntax_version >= 7 ? "Constant" : "NONE"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/julia.vim	/^let b:current_syntax = "julia"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/slime.vim	/^  let main_syntax = 'slime'$/;"	v
b:elixir_no_expensive	plugged/vim-polyglot/syntax/slime.vim	/^let b:elixir_no_expensive = 1$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/slime.vim	/^let b:current_syntax = "slime"$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/pod.vim	/^let s:cpo_save = &cpo$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/pod.vim	/^let b:current_syntax = "pod"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/asciidoc.vim	/^let b:current_syntax = "asciidoc"$/;"	v
did_fs_syntax_inits	plugged/vim-polyglot/syntax/fsharp.vim	/^        let did_fs_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/fsharp.vim	/^let b:current_syntax = 'fsharp'$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/perl.vim	/^let s:cpo_save = &cpo$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/perl.vim	/^let b:current_syntax = "perl"$/;"	v
main_syntax	plugged/vim-polyglot/syntax/json.vim	/^  let main_syntax = 'json'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/json.vim	/^let b:current_syntax = "json"$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/puppet.vim	/^let s:cpo_sav = &cpo$/;"	v
HiLink	plugged/vim-polyglot/syntax/puppet.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/puppet.vim	/^let b:current_syntax = "puppet"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/litcoffee.vim	/^let b:current_syntax = "litcoffee"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/Jenkinsfile.vim	/^let b:current_syntax = "Jenkinsfile"$/;"	v
did_rhelp_syntax_inits	plugged/vim-polyglot/syntax/rhelp.vim	/^    let did_rhelp_syntax_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
did_txt_syn_inits	plugged/vim-polyglot/syntax/textile.vim	/^        let did_txt_syn_inits = 1$/;"	v
HiLink	plugged/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
b:current_syntax	plugged/vim-polyglot/syntax/gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
s:cpo_save	plugged/vim-polyglot/syntax/raml.vim	/^let s:cpo_save = &cpo$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/raml.vim	/^let b:current_syntax = "raml"$/;"	v
s:cpo_sav	plugged/vim-polyglot/syntax/ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:foldable_groups	plugged/vim-polyglot/syntax/ruby.vim	/^let s:foldable_groups = split($/;"	v
foldable	plugged/vim-polyglot/syntax/ruby.vim	/^function! s:foldable(...) abort$/;"	f
s:spell_cluster	plugged/vim-polyglot/syntax/ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
b:ruby_no_expensive	plugged/vim-polyglot/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
ruby_minlines	plugged/vim-polyglot/syntax/ruby.vim	/^    let ruby_minlines = 500$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/tmux.vim	/^let b:current_syntax = 'tmux'$/;"	v
main_syntax	plugged/vim-polyglot/syntax/scss.vim	/^  let main_syntax = 'scss'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/scss.vim	/^let b:current_syntax = "scss"$/;"	v
g:main_syntax	plugged/vim-polyglot/syntax/gohtmltmpl.vim	/^  let g:main_syntax = 'html'$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/gohtmltmpl.vim	/^let b:current_syntax = "gohtmltmpl"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/less.vim	/^let b:current_syntax = "less"$/;"	v
s:keepcpo	plugged/vim-polyglot/syntax/cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
g:cucumber_languages	plugged/vim-polyglot/syntax/cucumber.vim	/^let g:cucumber_languages = {$/;"	v
pattern	plugged/vim-polyglot/syntax/cucumber.vim	/^function! s:pattern(key)$/;"	f
Add	plugged/vim-polyglot/syntax/cucumber.vim	/^function! s:Add(name)$/;"	f
b:current_syntax	plugged/vim-polyglot/syntax/cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	plugged/vim-polyglot/syntax/systemd.vim	/^let b:current_syntax = "systemd"$/;"	v
g:go_highlight_array_whitespace_error	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_array_whitespace_error = 0$/;"	v
g:go_highlight_chan_whitespace_error	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_chan_whitespace_error = 0$/;"	v
g:go_highlight_extra_types	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_extra_types = 0$/;"	v
g:go_highlight_space_tab_error	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_space_tab_error = 0$/;"	v
g:go_highlight_trailing_whitespace_error	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_trailing_whitespace_error = 0$/;"	v
g:go_highlight_operators	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_operators = 0$/;"	v
g:go_highlight_functions	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_functions = 0$/;"	v
g:go_highlight_function_arguments	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_function_arguments = 0$/;"	v
g:go_highlight_function_calls	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_function_calls = 0$/;"	v
g:go_highlight_fields	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_fields = 0$/;"	v
g:go_highlight_types	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_types = 0$/;"	v
g:go_highlight_build_constraints	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_build_constraints = 0$/;"	v
g:go_highlight_string_spellcheck	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_string_spellcheck = 1$/;"	v
g:go_highlight_format_strings	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_format_strings = 1$/;"	v
g:go_highlight_generate_tags	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_generate_tags = 0$/;"	v
g:go_highlight_variable_assignments	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_variable_assignments = 0$/;"	v
g:go_highlight_variable_declarations	plugged/vim-polyglot/syntax/go.vim	/^  let g:go_highlight_variable_declarations = 0$/;"	v
s:fold_block	plugged/vim-polyglot/syntax/go.vim	/^let s:fold_block = 1$/;"	v
s:fold_import	plugged/vim-polyglot/syntax/go.vim	/^let s:fold_import = 1$/;"	v
s:fold_varconst	plugged/vim-polyglot/syntax/go.vim	/^let s:fold_varconst = 1$/;"	v
s:fold_package_comment	plugged/vim-polyglot/syntax/go.vim	/^let s:fold_package_comment = 1$/;"	v
s:fold_comment	plugged/vim-polyglot/syntax/go.vim	/^let s:fold_comment = 0$/;"	v
s:fold_block	plugged/vim-polyglot/syntax/go.vim	/^    let s:fold_block = 0$/;"	v
s:fold_import	plugged/vim-polyglot/syntax/go.vim	/^    let s:fold_import = 0$/;"	v
s:fold_varconst	p